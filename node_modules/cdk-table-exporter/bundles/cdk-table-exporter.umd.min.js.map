{"version":3,"sources":["ng://cdk-table-exporter/lib/cdk-table-exporter.module.ts","ng://cdk-table-exporter/lib/export-type.ts","ng://cdk-table-exporter/lib/mime.ts","ng://cdk-table-exporter/lib/constants.ts","ng://cdk-table-exporter/lib/file-util.ts","ng://cdk-table-exporter/lib/cdk-table-exporter.ts","ng://cdk-table-exporter/lib/services/exporters/file-exporter.ts","node_modules/tslib/tslib.es6.js","ng://cdk-table-exporter/lib/services/exporters/json-exporter.service.ts","ng://cdk-table-exporter/lib/services/exporters/txt-exporter.service.ts","ng://cdk-table-exporter/lib/services/exporters/worksheet-exporter.ts","ng://cdk-table-exporter/lib/services/exporters/xls-exporter.service.ts","ng://cdk-table-exporter/lib/services/exporters/xlsx-exporter.service.ts","ng://cdk-table-exporter/lib/services/exporters/csv-exporter.service.ts","ng://cdk-table-exporter/lib/services/service-locator.service.ts","ng://cdk-table-exporter/lib/services/data-extractor.service.ts"],"names":["CdkTableExporterModule","NgModule","args","declarations","imports","CdkTableModule","exports","XLS","XLSX","CSV","TXT","JSON","OTHER","Mime","extension","contentTypeHeader","this","MAT_TABLE_EXPORTER","TYPE_ARRAY","CHAR_SET_UTF","CHAR_SET_UTF_8","CONTENT_TYPE_TEXT","ExportType","CONTENT_TYPE_APPLICATION","CONTENT_TYPE_EXCEL","DOT","EXTENSION_XLS","EXTENSION_XLSX","EXTENSION_CSV","EXTENSION_JSON","EXTENSION_TEXT","MIME_EXCEL_XLS","MIME_EXCEL_XLSX","MIME_JSON","MIME_TXT","MIME_CSV","XLS_REGEX","XLSX_COLS","FileUtil","save","content","mime","options","blob","Blob","type","fileName","FileSaver.saveAs","isXls","toLowerCase","match","identifyExportType","removeExtension","split","CdkTableExporter","renderer","serviceLocator","dataExtractor","table","viewContainerRef","exportCompleted","EventEmitter","exportStarted","initCdkTable","Object","defineProperty","prototype","_cdkTable","value","console","warn","_exporterButton","setButtonListener","_fileName","_sheetName","componentView","component","Error","_this","listen","_elementRef","nativeElement","evt","sheet","exportTable","exportType","loadExporter","_options","emit","_isIterating","_isExporting","_data","Array","enableExportButton","extractTableHeader","exportWithPagination","notPaginated","exportSinglePage","valueOf","_exporterService","exporter","getService","_initialPageIndex","getCurrentPageIndex","initPageHandler","goToPage","extractDataOnCurrentPage","extractTableFooter","exportExtractedData","concat","extractRows","hiddenColumns","_subscription","getPageChangeObservable","subscribe","setTimeout","hasNextPage","nextPage","export","extractSpecialRow","outlet","row","extractRow","push","_headerRowOutlet","_footerRowOutlet","getPageCount","setProperty","Input","Output","FileExporter","rows","createContent","mimeType","getMimeType","extendStatics","d","b","setPrototypeOf","__proto__","p","hasOwnProperty","__extends","__","constructor","create","JsonExporterService","_super","call","tslib_1.__extends","stringify","Injectable","providedIn","TxtExporterService","forEach","element","values","join","getDelimiter","delimiter","WorksheetExporter","workSheet","XLSX.utils","json_to_sheet","skipHeader","workSheetToContent","XlsExporterService","worksheet","workBook","book_new","columnWidths","convertToWch","correctTypes","book_append_sheet","XLSX.write","bookType","replace","map","width","wch","XlsxExporterService","CsvExporterService","sheet_to_csv","ServiceLocatorService","injector","get","Injector","DataExtractorService","cdkTable","getRowsAsJsonArray","_rowOutlet","renderedRows","getRenderedRows","convertToJsonArray","_getRenderedRows","result","i","length","convertRow","createExcelItem","cells","children","shouldHide","item","innerText","columnIndex","includes","assign"],"mappings":"uaAAA,IAAAA,EAAA,WAGA,SAAAA,KAOsC,2BAPrCC,EAAAA,SAAQC,KAAA,CAAC,CACRC,aAAc,GACdC,QAAS,CACPC,EAAAA,gBAEFC,QAAS,OAE2BN,EAVtC,MCCEO,IAAM,MACNC,KAAO,OACPC,IAAM,MACNC,IAAM,MACNC,KAAO,OACPC,MAAQ,SCNVC,EAKE,SAAAA,EAAYC,EAAmBC,GAC7BC,KAAKF,UAAYA,EACjBE,KAAKD,kBAAoBA,GCJhBE,EAAqB,qBACrBC,EAAa,QACbC,EAAe,gBACfC,EAAiBD,EAAe,IAChCE,EAAoBC,EAAWZ,IAAM,IACrCa,EAA2B,eAC3BC,EAAqBD,EAA2B,eAChDE,EAAM,IACNC,EAAgBD,EAAMH,EAAWf,IACjCoB,EAAkBF,EAAMH,EAAWd,KACnCoB,EAAiBH,EAAMH,EAAWb,IAClCoB,EAAkBJ,EAAMH,EAAWX,KACnCmB,EAAkBL,EAAMH,EAAWZ,IACnCqB,EAAiB,IAAIlB,EAAKa,EAAeF,EAAqBJ,GAC9DY,EAAkB,IAAInB,EAAKc,EAAgBH,EAAqBJ,GAChEa,EAAY,IAAIpB,EAAKgB,EAAgBR,EAAoBV,KAAOS,GAChEc,EAAW,IAAIrB,EAAKiB,EAAgBT,EAAoBC,EAAWZ,IAAMU,GACzEe,EAAW,IAAItB,EAAKe,EAAeP,EAAoBC,EAAWb,IAAMW,GAExEgB,EAAYX,MAAcH,EAAWf,IAAM,IAG3C8B,EAAY,QCzBzBC,EAAA,WAMA,SAAAA,KAyBA,OAxBgBA,EAAAC,KAAd,SAAmBC,EAAiBC,EAAYC,OACxCC,EAAO,IAAIC,KAAK,CAACJ,GAAU,CAACK,KAAMJ,EAAK1B,oBACzC+B,EAAW7B,EACXyB,GAAWA,EAAQI,WACrBA,EAAWJ,EAAQI,UAErBC,EAAAA,OAAiBJ,EAAMG,EAAWL,EAAK3B,YAG3BwB,EAAAU,MAAd,SAAoBF,GAClB,OAAkD,MAA3CA,EAASG,cAAcC,MAAMd,IAGxBE,EAAAa,mBAAd,SAAiCL,GAC/B,OAAIA,GAAYR,EAASU,MAAMF,GACtBxB,EAAWf,IAEXe,EAAWd,MAIR8B,EAAAc,gBAAd,SAA8BV,GAC5BA,EAAQI,SAAWJ,EAAQI,SAASO,MAAM5B,GAAK,IAEnDa,EA/BA,GCeAgB,EAAA,WAsFE,SAAAA,EAAsBC,EACFC,EACAC,EACEC,EACAC,GAJA3C,KAAAuC,SAAAA,EACFvC,KAAAwC,eAAAA,EACAxC,KAAAyC,cAAAA,EACEzC,KAAA0C,MAAAA,EACA1C,KAAA2C,iBAAAA,EApFZ3C,KAAA4C,gBAAmB,IAAIC,EAAAA,aACvB7C,KAAA8C,cAAiB,IAAID,EAAAA,aAoF7B7C,KAAK+C,eAqJT,OArOEC,OAAAC,eAAIX,EAAAY,UAAA,WAAQ,KAAZ,WACE,OAAOlD,KAAKmD,eAMd,SACaC,GACXC,QAAQC,KAAK,iCACbtD,KAAKmD,UAAYC,mCAKnBJ,OAAAC,eAAIX,EAAAY,UAAA,iBAAc,KAAlB,WACE,OAAOlD,KAAKuD,qBAMd,SACmBH,GACjBC,QAAQC,KAAK,uCACbtD,KAAKuD,gBAAkBH,EACvBpD,KAAKwD,qDAKPR,OAAAC,eAAIX,EAAAY,UAAA,WAAQ,KAAZ,WACE,OAAOlD,KAAKyD,eAMd,SACaL,GACXC,QAAQC,KAAK,iCACbtD,KAAKyD,UAAYL,mCAKnBJ,OAAAC,eAAIX,EAAAY,UAAA,YAAS,KAAb,WACE,OAAOlD,KAAK0D,gBAMd,SACcN,GACZC,QAAQC,KAAK,kCACbtD,KAAK0D,WAAaN,mCAgDZd,EAAAY,UAAAH,aAAR,eAEQL,EAAQ1C,KAAK2C,iBAAwB,MAAEgB,cAAcC,UAC3D,GAAIlB,EACF1C,KAAKmD,UAAYT,MACZ,CAAA,IAAI1C,KAAK0C,MAGd,MAAM,IAAImB,MAAM,+BAFhB7D,KAAKmD,UAAYnD,KAAK0C,QAMlBJ,EAAAY,UAAAM,kBAAR,WAAA,IAAAM,EAAA9D,KACMA,KAAKuD,iBACPvD,KAAKuC,SAASwB,OAAO/D,KAAKuD,gBAAgBS,YAAYC,cAAe,QAAO,SAAGC,OACvExC,EAAO,CAAII,SAAUgC,EAAKL,UAAWU,MAAOL,EAAKJ,YACvDI,EAAKM,YAAY9C,EAASa,mBAAmB2B,EAAKL,WAAY/B,MAQpEY,EAAAY,UAAAkB,YAAA,SAAYC,EAA6E3C,GACvF1B,KAAKsE,aAAaD,GAClBrE,KAAKuE,SAAW7C,EAChB1B,KAAK8C,cAAc0B,OACnBxE,KAAKyE,cAAe,EACpBzE,KAAK0E,cAAe,EACpB1E,KAAK2E,MAAQ,IAAIC,MACjB5E,KAAK6E,oBAAmB,GACxB7E,KAAK8E,qBACL,IACE9E,KAAK+E,uBACL,MAAOC,GACPhF,KAAKiF,qBAID3C,EAAAY,UAAAoB,aAAR,SAAqBD,GACfA,IAAe/D,EAAWV,MAAMsF,UAClClF,KAAKmF,iBAAmBnF,KAAKoF,SAE7BpF,KAAKmF,iBAAmBnF,KAAKwC,eAAe6C,WAAWhB,IAInD/B,EAAAY,UAAA6B,qBAAR,WACE/E,KAAKsF,kBAAoBtF,KAAKuF,sBAC9BvF,KAAKwF,kBACLxF,KAAKyF,SAAS,IAGRnD,EAAAY,UAAA+B,iBAAR,WACEjF,KAAK0F,2BACL1F,KAAK2F,qBACL3F,KAAK4F,uBAGCtD,EAAAY,UAAAwC,yBAAR,WACE1F,KAAK2E,MAAQ3E,KAAK2E,MAAMkB,OAAO7F,KAAKyC,cAAcqD,YAAY9F,KAAKmD,UAAWnD,KAAK+F,iBAG7EzD,EAAAY,UAAAsC,gBAAR,WAAA,IAAA1B,EAAA9D,KACOA,KAAKgG,gBACRhG,KAAKgG,cAAgBhG,KAAKiG,0BAA0BC,UAAS,WAC3DC,WAAU,WACJrC,EAAKW,cACPX,EAAK4B,2BACD5B,EAAKsC,cACPtC,EAAKuC,YAELvC,EAAKW,cAAe,EACpBX,EAAK2B,SAAS3B,EAAKwB,qBAEZxB,EAAKY,eACdZ,EAAKY,cAAe,EACpBZ,EAAK6B,qBACL7B,EAAK8B,6BAOPtD,EAAAY,UAAA0C,oBAAR,WACE5F,KAAKmF,iBAAiBmB,UAAOtG,KAAK2E,MAAO3E,KAAKuE,UAC9CvE,KAAK2E,MAAQ,IAAIC,MACjB5E,KAAK6E,oBAAmB,GACxB7E,KAAK4C,gBAAgB4B,QAGflC,EAAAY,UAAAqD,kBAAR,SAA0BC,OAClBC,EAAMzG,KAAKyC,cAAciE,WAAW1G,KAAKmD,UAAWnD,KAAK+F,cAAeS,GAC1EC,GACFzG,KAAK2E,MAAMgC,KAAKF,IAIZnE,EAAAY,UAAA4B,mBAAR,WACE9E,KAAKuG,kBAAkBvG,KAAKmD,UAAUyD,mBAGhCtE,EAAAY,UAAAyC,mBAAR,WACE3F,KAAKuG,kBAAkBvG,KAAKmD,UAAU0D,mBAGjCvE,EAAAY,UAAAkD,YAAP,WACE,OAAIpG,KAAKuF,sBAAwBvF,KAAK8G,eAAiB,GAOlDxE,EAAAY,UAAAmD,SAAP,WACErG,KAAKyF,SAASzF,KAAKuF,sBAAwB,IAGrCjD,EAAAY,UAAA2B,mBAAR,SAA2BzB,GACrBpD,KAAKuD,iBACPvD,KAAKuC,SAASwE,YAAY/G,KAAKuD,gBAAgBS,YAAYC,cAAe,WAAYb,EAAQ,KAAO,gDAzOxG4D,EAAAA,wBACAA,EAAAA,+BACAC,EAAAA,8BACAA,EAAAA,yBAWAD,EAAAA,8BAeAA,EAAAA,wBAgBAA,EAAAA,yBAeAA,EAAAA,SAgLH1E,EAhPA,gBCVE,SAAA4E,KAaF,OAXSA,EAAAhE,UAAAoD,UAAP,SAAca,EAAkBzF,GAC9B,IAAKyF,EACH,MAAM,IAAItD,MAAM,kEAEZrC,EAAUxB,KAAKoH,cAAcD,EAAMzF,GACnC2F,EAAWrH,KAAKsH,cACtBhG,EAASC,KAAKC,EAAS6F,EAAU3F,IAKrCwF,KCFIK,EAAgB,SAASC,EAAGC,GAI5B,OAHAF,EAAgBvE,OAAO0E,gBAClB,CAAEC,UAAW,cAAgB/C,OAAS,SAAU4C,EAAGC,GAAKD,EAAEG,UAAYF,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAIG,KAAKH,EAAOA,EAAEI,eAAeD,KAAIJ,EAAEI,GAAKH,EAAEG,MACpDJ,EAAGC,IAG5B,SAAgBK,EAAUN,EAAGC,GAEzB,SAASM,IAAO/H,KAAKgI,YAAcR,EADnCD,EAAcC,EAAGC,GAEjBD,EAAEtE,UAAkB,OAANuE,EAAazE,OAAOiF,OAAOR,IAAMM,EAAG7E,UAAYuE,EAAEvE,UAAW,IAAI6E,qBCfjF,SAAAG,WACEC,EAAAC,KAAApI,OAAOA,YAH8BqI,EAAAA,EAAAA,GAMhCH,EAAAhF,UAAAkE,cAAP,SAAqBD,EAAazF,GAChC,OAAO/B,KAAK2I,UAAUnB,IAEhBe,EAAAhF,UAAAoE,YAAP,WACC,OAAOrG,uBAbVsH,EAAAA,WAAUrJ,KAAA,CAAC,CACVsJ,WAAY,uJAE2BtB,iBCEvC,SAAAuB,WACEN,EAAAC,KAAApI,OAAOA,YAH6BqI,EAAAA,EAAAA,GAM/BI,EAAAvF,UAAAkE,cAAP,SAAqBD,EAAazF,GAAlC,IAAAoC,EAAA9D,KACMwB,EAAU,GAId,OAHA2F,EAAKuB,QAAO,SAACC,GACXnH,GAAWwB,OAAO4F,OAAOD,GAASE,KAAK/E,EAAKgF,aAAapH,INKzC,OMHXF,GAGFiH,EAAAvF,UAAAoE,YAAP,WACE,OAAOpG,GAGDuH,EAAAvF,UAAA4F,aAAR,SAAqBpH,GACnB,OAAIA,GAAWA,EAAQqH,UACdrH,EAAQqH,UNLF,0BMlBlBR,EAAAA,WAAUrJ,KAAA,CAAC,CACVsJ,WAAY,uJAE0BtB,iBCDtC,SAAA8B,WACEb,EAAAC,KAAApI,OAAOA,KAYX,OAfmDqI,EAAAA,EAAAA,GAM1CW,EAAA9F,UAAAkE,cAAP,SAAqBD,EAAkBzF,OAC/BuH,EAA6BC,EAAAA,MAAWC,cAAchC,EAAM,CAChEiC,YAAY,IAEd,OAAOpJ,KAAKqJ,mBAAmBJ,EAAWvH,IAK9CsH,GAfmD9B,iBCMjD,SAAAoC,WACEnB,EAAAC,KAAApI,OAAOA,YAH6BqI,EAAAA,EAAAA,GAM/BiB,EAAApG,UAAAmG,mBAAP,SAA0BE,EAA2B7H,QAAA,IAAAA,IAAAA,EAAA,QAC7C8H,EAAWN,EAAAA,MAAWO,WAM5B,OALI/H,EAAQgI,eACVH,EAAUlI,GAAarB,KAAK2J,aAAajI,EAAQgI,eAEnD1J,KAAK4J,aAAalI,GAClBwH,EAAAA,MAAWW,kBAAkBL,EAAUD,EAAW7H,EAAQyC,OACnD2F,EAAAA,MAAWN,EAAU9H,IAGvB4H,EAAApG,UAAAoE,YAAP,WACE,OAAOvG,GAGDuI,EAAApG,UAAA0G,aAAR,SAAqBlI,GACdA,EAAQG,OACXH,EAAQG,KAAO3B,GAEjB,EAAiB6J,SAAW/J,KAAKsH,cAAcxH,UAAUkK,QAAQ,IAAK,KAGhEV,EAAApG,UAAAyG,aAAR,SAAqBD,GACnB,OAAOA,EAAaO,IAAG,SAACC,GAAS,MAAA,CAAEC,IAAKD,0BA/B3C3B,EAAAA,WAAUrJ,KAAA,CAAC,CACVsJ,WAAY,uJAE0BQ,iBCAtC,SAAAoB,WACEjC,EAAAC,KAAApI,OAAOA,YAH8BqI,EAAAA,EAAAA,GAOhC+B,EAAAlH,UAAAoE,YAAP,WACE,OAAOtG,uBAXVuH,EAAAA,WAAUrJ,KAAA,CAAC,CACVsJ,WAAY,uJAE2Bc,iBCIvC,SAAAe,WACElC,EAAAC,KAAApI,OAAOA,YAH6BqI,EAAAA,EAAAA,GAM/BgC,EAAAnH,UAAAmG,mBAAP,SAA0BE,EAA2B7H,GACnD,OAAOwH,EAAAA,MAAWoB,aAAaf,IAG1Bc,EAAAnH,UAAAoE,YAAP,WACE,OAAOnG,uBAdVoH,EAAAA,WAAUrJ,KAAA,CAAC,CACVsJ,WAAY,uJAE0BQ,GCVxCuB,EAAA,WAcE,SAAAA,EAAoBC,GAAAxK,KAAAwK,SAAAA,SAEbD,EAAArH,UAAAmC,WAAP,SAAkBhB,GAChB,OAAQA,GACN,KAAK/D,EAAWf,IAAI2F,UAClB,OAAOlF,KAAKwK,SAASC,IAAwBnB,GAC/C,KAAKhJ,EAAWd,KAAK0F,UACjB,OAAOlF,KAAKwK,SAASC,IAAyBL,GAClD,KAAK9J,EAAWX,KAAKuF,UACnB,OAAOlF,KAAKwK,SAASC,IAAyBvC,GAChD,KAAK5H,EAAWZ,IAAIwF,UAClB,OAAOlF,KAAKwK,SAASC,IAAwBhC,GAC/C,KAAKnI,EAAWb,IAAIyF,UAClB,OAAOlF,KAAKwK,SAASC,IAAwBJ,GAC/C,KAAK/J,EAAWV,MAAMsF,UACpB,OAAO,KACT,QACE,OAAOlF,KAAKwK,SAASC,IAAyBL,yBAtBrD7B,EAAAA,WAAUrJ,KAAA,CAAC,CACVsJ,WAAY,oDAROkC,EAAAA,uIAFrB,GCAAC,EAAA,WAQE,SAAAA,YAEOA,EAAAzH,UAAA4C,YAAP,SAAmB8E,EAAe7E,GAChC,OAAO/F,KAAK6K,mBAAmBD,EAAU7E,EAAe6E,EAASE,aAG5DH,EAAAzH,UAAAwD,WAAP,SAAkBkE,EAAe7E,EAA2BS,GAC1D,OAAOxG,KAAK6K,mBAAmBD,EAAU7E,EAAeS,GAAQ,IAG1DmE,EAAAzH,UAAA2H,mBAAR,SAA2BD,EAAe7E,EAA2BS,OAC7DuE,EAAe/K,KAAKgL,gBAAgBJ,EAAUpE,GACpD,OAAOxG,KAAKiL,mBAAmBlF,EAAegF,IAGxCJ,EAAAzH,UAAA8H,gBAAR,SAAwBJ,EAAepE,GACrC,OAAOoE,EAASM,iBAAiB1E,IAG3BmE,EAAAzH,UAAA+H,mBAAR,SAA2BlF,EAA2BoB,GAGpD,QAFMgE,EAAS,IAAIvG,MAEVwG,EAAI,EAAGA,EAAIjE,EAAKkE,OAAQD,IAAK,KAC9B3E,EAAqBzG,KAAKsL,WAAWvF,EAAeoB,EAAKiE,IAC/DD,EAAOxE,KAAK3G,KAAKuL,gBAAgB9E,IAEnC,OAAO0E,GAGDR,EAAAzH,UAAAoI,WAAR,SAAmBvF,EAA2BU,GAG5C,QAFM0E,EAAS,IAAIvG,MACb4G,EAAa/E,EAAIgF,SACdL,EAAI,EAAGA,EAAII,EAAMH,OAAQD,IAChC,IAAKpL,KAAK0L,WAAW3F,EAAeqF,GAAI,KAChCzC,EAAU6C,EAAMG,KAAKP,GAAGQ,UAC9BT,EAAOxE,KAAKgC,GAGhB,OAAOwC,GAGDR,EAAAzH,UAAAwI,WAAR,SAAmB3F,EAA2B8F,GAC5C,SAAI9F,IAAiBA,EAAc+F,SAASD,KAOtClB,EAAAzH,UAAAqI,gBAAR,SAAwB9E,GACtB,OAAOzD,OAAO+I,OAAO,GAAItF,wBAvD5B8B,EAAAA,WAAUrJ,KAAA,CAAC,CACVsJ,WAAY,sJAJd,qnBZqBmB,8BAEG,WACH","sourcesContent":["import { CdkTableModule } from '@angular/cdk/table';\nimport { NgModule } from '@angular/core';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CdkTableModule\n  ],\n  exports: []\n})\nexport class CdkTableExporterModule { }\n","export enum ExportType {\r\n  XLS = 'xls',\r\n  XLSX = 'xlsx',\r\n  CSV = 'csv',\r\n  TXT = 'txt',\r\n  JSON = 'json',\r\n  OTHER = 'other'\r\n}\r\n","export class Mime {\r\n\r\n  extension: string;\r\n  contentTypeHeader: string;\r\n\r\n  constructor(extension: string, contentTypeHeader: string) {\r\n    this.extension = extension;\r\n    this.contentTypeHeader = contentTypeHeader;\r\n  }\r\n\r\n}\r\n","import { ExportType } from './export-type';\r\nimport { Mime } from './mime';\r\n\r\nexport const MAT_TABLE_EXPORTER = 'mat-table-exporter';\r\nexport const TYPE_ARRAY = 'array';\r\nexport const CHAR_SET_UTF = ';charset=utf-';\r\nexport const CHAR_SET_UTF_8 = CHAR_SET_UTF + '8';\r\nexport const CONTENT_TYPE_TEXT = ExportType.TXT + '/';\r\nexport const CONTENT_TYPE_APPLICATION = 'application/';\r\nexport const CONTENT_TYPE_EXCEL = CONTENT_TYPE_APPLICATION + 'octet-stream';\r\nexport const DOT = '.';\r\nexport const EXTENSION_XLS = DOT + ExportType.XLS;\r\nexport const EXTENSION_XLSX =  DOT + ExportType.XLSX;\r\nexport const EXTENSION_CSV =  DOT + ExportType.CSV;\r\nexport const EXTENSION_JSON =  DOT + ExportType.JSON;\r\nexport const EXTENSION_TEXT =  DOT + ExportType.TXT;\r\nexport const MIME_EXCEL_XLS = new Mime(EXTENSION_XLS, CONTENT_TYPE_EXCEL + CHAR_SET_UTF_8);\r\nexport const MIME_EXCEL_XLSX = new Mime(EXTENSION_XLSX, CONTENT_TYPE_EXCEL + CHAR_SET_UTF_8);\r\nexport const MIME_JSON = new Mime(EXTENSION_JSON, CONTENT_TYPE_TEXT + JSON + CHAR_SET_UTF_8);\r\nexport const MIME_TXT = new Mime(EXTENSION_TEXT, CONTENT_TYPE_TEXT + ExportType.TXT + CHAR_SET_UTF_8);\r\nexport const MIME_CSV = new Mime(EXTENSION_CSV, CONTENT_TYPE_TEXT + ExportType.CSV + CHAR_SET_UTF_8);\r\nexport const REF = '!ref';\r\nexport const XLS_REGEX = DOT + '*\\.' + ExportType.XLS + '$';\r\nexport const RETURN = '\\n';\r\nexport const TAB = '\\t';\r\nexport const XLSX_COLS = '!cols';\r\n","import { ExportType } from './export-type';\r\nimport * as FileSaver from 'file-saver';\r\nimport { MAT_TABLE_EXPORTER, DOT, XLS_REGEX } from './constants';\r\nimport { Mime } from './mime';\r\nimport { Options } from './options';\r\n\r\nexport class FileUtil {\r\n  public static save(content: string, mime: Mime, options?: Options) {\r\n    const blob = new Blob([content], {type: mime.contentTypeHeader});\r\n    let fileName = MAT_TABLE_EXPORTER;\r\n    if (options && options.fileName) {\r\n      fileName = options.fileName;\r\n    }\r\n    FileSaver.saveAs(blob, fileName + mime.extension);\r\n  }\r\n\r\n  public static isXls(fileName: string): boolean {\r\n    return fileName.toLowerCase().match(XLS_REGEX) != null;\r\n  }\r\n\r\n  public static identifyExportType(fileName?: string): ExportType {\r\n    if (fileName && FileUtil.isXls(fileName)) {\r\n      return ExportType.XLS;\r\n    } else {\r\n      return ExportType.XLSX;\r\n    }\r\n  }\r\n\r\n  public static removeExtension(options?: Options) {\r\n    options.fileName = options.fileName.split(DOT)[0];\r\n  }\r\n}\r\n","import { DataRowOutlet } from '@angular/cdk/table';\r\nimport { EventEmitter, Input, Output, Renderer2, ViewContainerRef } from '@angular/core';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { ExportType } from './export-type';\r\nimport { FileUtil } from './file-util';\r\nimport { ExcelOptions, Options } from './options';\r\nimport { DataExtractorService } from './services/data-extractor.service';\r\nimport { Exporter } from './services/exporters/exporter';\r\nimport { ServiceLocatorService } from './services/service-locator.service';\r\n\r\n\r\n/**\r\n * Exporter class for CdkTable. Abstracts the varying behaviors among different CdkTable implementations.\r\n */\r\n// @Directive()\r\nexport abstract class CdkTableExporter {\r\n\r\n  private _exporterService: Exporter<Options>;\r\n\r\n  @Input() hiddenColumns?: Array<number>;\r\n  @Input() exporter?: Exporter<Options>;\r\n  @Output() exportCompleted ?= new EventEmitter<void>();\r\n  @Output() exportStarted ?= new EventEmitter<void>();\r\n\r\n  private _cdkTable: any;\r\n\r\n  get cdkTable(): any {\r\n    return this._cdkTable;\r\n  }\r\n\r\n/**\r\n * @deprecated\r\n */\r\n  @Input()\r\n  set cdkTable(value: any) {\r\n    console.warn('cdkTable input is deprecated!');\r\n    this._cdkTable = value;\r\n  }\r\n\r\n  private _exporterButton: any;\r\n\r\n  get exporterButton(): any {\r\n    return this._exporterButton;\r\n  }\r\n\r\n  /**\r\n   * @deprecated\r\n   */\r\n  @Input()\r\n  set exporterButton(value: any) {\r\n    console.warn('exporterButton input is deprecated!');\r\n    this._exporterButton = value;\r\n    this.setButtonListener();\r\n  }\r\n\r\n  private _fileName: string;\r\n\r\n  get fileName(): string {\r\n    return this._fileName;\r\n  }\r\n\r\n/**\r\n * @deprecated\r\n */\r\n  @Input()\r\n  set fileName(value: string) {\r\n    console.warn('fileName input is deprecated!');\r\n    this._fileName = value;\r\n  }\r\n\r\n  private _sheetName: string;\r\n\r\n  get sheetName(): string {\r\n    return this._sheetName;\r\n  }\r\n\r\n/**\r\n * @deprecated\r\n */\r\n  @Input()\r\n  set sheetName(value: string) {\r\n    console.warn('sheetName input is deprecated!');\r\n    this._sheetName = value;\r\n  }\r\n\r\n\r\n  /**\r\n   * Data array which is extracted from nativeTable\r\n   */\r\n  private _data: Array<any>;\r\n\r\n  private _isIterating: boolean;\r\n\r\n  private _initialPageIndex: number;\r\n\r\n  private _isExporting: boolean;\r\n\r\n  private _subscription: Subscription;\r\n\r\n  private _options?: Options;\r\n\r\n  constructor(protected renderer: Renderer2,\r\n              private serviceLocator: ServiceLocatorService,\r\n              private dataExtractor: DataExtractorService,\r\n              protected table: any,\r\n              protected viewContainerRef: ViewContainerRef) {\r\n    this.initCdkTable();\r\n  }\r\n\r\n  /**\r\n   * Must return the number of pages of the table\r\n   */\r\n  public abstract getPageCount(): number;\r\n\r\n  /**\r\n   * Must return the index of the current page that's displayed\r\n   */\r\n  public abstract getCurrentPageIndex(): number;\r\n\r\n  /**\r\n   * When called, the CdkTable should render the rows inside the page whose index given as parameter\r\n   * @param index page index\r\n   */\r\n  public abstract goToPage(index: number): void;\r\n\r\n  /**\r\n   * Must return an observable that notifies the subscribers about page changes\r\n   */\r\n  public abstract getPageChangeObservable(): Observable<any>;\r\n\r\n  private initCdkTable() {\r\n    // tslint:disable-next-line:no-string-literal\r\n    const table = this.viewContainerRef['_data'].componentView.component;\r\n    if (table) {\r\n      this._cdkTable = table;\r\n    } else if (this.table) {\r\n      this._cdkTable = this.table;\r\n    } else {\r\n      throw new Error('Unsupported Angular version');\r\n    }\r\n  }\r\n\r\n  private setButtonListener() {\r\n    if (this._exporterButton) {\r\n      this.renderer.listen(this._exporterButton._elementRef.nativeElement, 'click', (evt) => {\r\n        const options = {fileName: this._fileName, sheet: this._sheetName} as ExcelOptions;\r\n        this.exportTable(FileUtil.identifyExportType(this._fileName), options); // this is to support deprecated way of exporting\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Triggers page event chain thus extracting and exporting all the rows in nativetables in pages\r\n   */\r\n  exportTable(exportType?: ExportType | 'xls' | 'xlsx' | 'csv' | 'txt' | 'json' | 'other', options?: Options) {\r\n    this.loadExporter(exportType);\r\n    this._options = options;\r\n    this.exportStarted.emit();\r\n    this._isIterating = true;\r\n    this._isExporting = true;\r\n    this._data = new Array<any>();\r\n    this.enableExportButton(false);\r\n    this.extractTableHeader();\r\n    try {\r\n      this.exportWithPagination();\r\n    } catch (notPaginated) {\r\n      this.exportSinglePage();\r\n    }\r\n  }\r\n\r\n  private loadExporter(exportType: any) {\r\n    if (exportType === ExportType.OTHER.valueOf()) {\r\n      this._exporterService = this.exporter;\r\n    } else {\r\n      this._exporterService = this.serviceLocator.getService(exportType);\r\n    }\r\n  }\r\n\r\n  private exportWithPagination() {\r\n    this._initialPageIndex = this.getCurrentPageIndex();\r\n    this.initPageHandler();\r\n    this.goToPage(0);\r\n  }\r\n\r\n  private exportSinglePage() {\r\n    this.extractDataOnCurrentPage();\r\n    this.extractTableFooter();\r\n    this.exportExtractedData();\r\n  }\r\n\r\n  private extractDataOnCurrentPage() {\r\n    this._data = this._data.concat(this.dataExtractor.extractRows(this._cdkTable, this.hiddenColumns));\r\n  }\r\n\r\n  private initPageHandler(): void {\r\n    if (!this._subscription) {\r\n      this._subscription = this.getPageChangeObservable().subscribe(() => {\r\n        setTimeout(() => {\r\n          if (this._isIterating) {\r\n            this.extractDataOnCurrentPage();\r\n            if (this.hasNextPage()) {\r\n              this.nextPage();\r\n            } else {\r\n              this._isIterating = false;\r\n              this.goToPage(this._initialPageIndex);\r\n            }\r\n          } else if (this._isExporting) {\r\n            this._isExporting = false;\r\n            this.extractTableFooter();\r\n            this.exportExtractedData();\r\n          }\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  private exportExtractedData() {\r\n    this._exporterService.export(this._data, this._options);\r\n    this._data = new Array<any>();\r\n    this.enableExportButton(true);\r\n    this.exportCompleted.emit();\r\n  }\r\n\r\n  private extractSpecialRow(outlet: DataRowOutlet) {\r\n    const row = this.dataExtractor.extractRow(this._cdkTable, this.hiddenColumns, outlet);\r\n    if (row) {\r\n      this._data.push(row);\r\n    }\r\n  }\r\n\r\n  private extractTableHeader() {\r\n    this.extractSpecialRow(this._cdkTable._headerRowOutlet);\r\n  }\r\n\r\n  private extractTableFooter() {\r\n    this.extractSpecialRow(this._cdkTable._footerRowOutlet);\r\n  }\r\n\r\n  public hasNextPage(): boolean {\r\n    if (this.getCurrentPageIndex() < this.getPageCount() - 1) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  public nextPage(): void {\r\n    this.goToPage(this.getCurrentPageIndex() + 1);\r\n  }\r\n\r\n  private enableExportButton(value: boolean) {\r\n    if (this._exporterButton) {\r\n      this.renderer.setProperty(this._exporterButton._elementRef.nativeElement, 'disabled', value ? null : 'true');\r\n    }\r\n  }\r\n}\r\n\r\n","import { FileUtil } from '../../file-util';\r\nimport { Mime } from '../../mime';\r\nimport { Exporter } from './exporter';\r\n\r\nexport abstract class FileExporter<T> implements Exporter<T> {\r\n  constructor() {}\r\n\r\n  public export(rows: Array<any>, options?: T) {\r\n    if (!rows) {\r\n      throw new Error('Empty json array is provided, rows parameter is mandatory!');\r\n    }\r\n    const content = this.createContent(rows, options);\r\n    const mimeType = this.getMimeType();\r\n    FileUtil.save(content, mimeType, options);\r\n  }\r\n\r\n  public abstract createContent(rows: Array<any>, options?: T): any;\r\n  public abstract getMimeType(): Mime;\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { Options } from '../../options';\nimport { FileExporter } from './file-exporter';\nimport { Mime } from '../../mime';\nimport { MIME_JSON } from '../../constants';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class JsonExporterService extends FileExporter<Options> {\n\n  constructor() {\n    super();\n  }\n\n  public createContent(rows: any[], options?: Options) {\n    return JSON.stringify(rows);\n  }\n   public getMimeType(): Mime {\n    return MIME_JSON;\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Mime } from '../../mime';\nimport { TxtOptions } from '../../options';\nimport { MIME_TXT, RETURN, TAB } from './../../constants';\nimport { FileExporter } from './file-exporter';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TxtExporterService extends FileExporter<TxtOptions> {\n\n  constructor() {\n    super();\n  }\n\n  public createContent(rows: any[], options?: TxtOptions) {\n    let content = '';\n    rows.forEach(element => {\n      content += Object.values(element).join(this.getDelimiter(options)) + RETURN;\n    });\n    return content;\n  }\n\n  public getMimeType(): Mime {\n    return MIME_TXT;\n  }\n\n  private getDelimiter(options?: TxtOptions) {\n    if (options && options.delimiter) {\n      return options.delimiter;\n    } else {\n      return TAB;\n    }\n  }\n\n}\n","import * as XLSX from 'xlsx';\nimport { Mime } from '../../mime';\nimport { FileExporter } from './file-exporter';\n/**\n * An angular service class that is used to create files out of json object arrays.\n */\nexport abstract class WorksheetExporter<T> extends FileExporter<T> {\n\n  constructor() {\n    super();\n  }\n\n  public createContent(rows: Array<any>, options?: T): any {\n    const workSheet: XLSX.WorkSheet =  XLSX.utils.json_to_sheet(rows, {\n      skipHeader: true // we don't want to see object properties as our headers\n    });\n    return this.workSheetToContent(workSheet, options);\n  }\n  public abstract workSheetToContent(workSheet: XLSX.WorkSheet, options?: T): any;\n  public abstract getMimeType(): Mime;\n\n}\n","import { Injectable } from '@angular/core';\nimport * as XLSX from 'xlsx';\nimport { MIME_EXCEL_XLS, TYPE_ARRAY, XLSX_COLS } from '../../constants';\nimport { Mime } from '../../mime';\nimport { ExcelOptions } from '../../options';\nimport { WorksheetExporter } from './worksheet-exporter';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class XlsExporterService extends WorksheetExporter<ExcelOptions> {\n\n  constructor() {\n    super();\n  }\n\n  public workSheetToContent(worksheet: XLSX.WorkSheet, options: ExcelOptions = {} as ExcelOptions): any {\n    const workBook = XLSX.utils.book_new();\n    if (options.columnWidths) {\n      worksheet[XLSX_COLS] = this.convertToWch(options.columnWidths);\n    }\n    this.correctTypes(options);\n    XLSX.utils.book_append_sheet(workBook, worksheet, options.sheet);\n    return XLSX.write(workBook, options);\n  }\n\n  public getMimeType(): Mime {\n    return MIME_EXCEL_XLS;\n  }\n\n  private correctTypes(options: ExcelOptions) {\n    if (!options.type) {\n      options.type = TYPE_ARRAY;\n    }\n    (options as any).bookType = this.getMimeType().extension.replace('.', ''); // sheetjs requires bookingType for excel format\n  }\n\n  private convertToWch(columnWidths: Array<number>): Array<{wch: number}> {\n    return columnWidths.map(width => ({wch: width}));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { XlsExporterService } from './xls-exporter.service';\nimport { Mime } from '../../mime';\nimport { MIME_EXCEL_XLSX } from '../../constants';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class XlsxExporterService extends XlsExporterService {\n\n  constructor() {\n    super();\n  }\n\n  // override\n  public getMimeType(): Mime {\n    return MIME_EXCEL_XLSX;\n  }\n}\n","import { MIME_CSV } from './../../constants';\nimport { Options } from '../../options';\nimport { Injectable } from '@angular/core';\nimport * as XLSX from 'xlsx';\nimport { WorksheetExporter } from './worksheet-exporter';\nimport { Mime } from '../../mime';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CsvExporterService extends WorksheetExporter<Options> {\n\n  constructor() {\n    super();\n  }\n\n  public workSheetToContent(worksheet: XLSX.WorkSheet, options?: Options): any {\n    return XLSX.utils.sheet_to_csv(worksheet);\n  }\n\n  public getMimeType(): Mime {\n    return MIME_CSV;\n  }\n}\n","import { CsvExporterService } from './exporters/csv-exporter.service';\nimport { TxtExporterService } from './exporters/txt-exporter.service';\nimport { Injectable, Injector } from '@angular/core';\nimport { Options } from '../options';\nimport { ExportType } from './../export-type';\nimport { Exporter } from './exporters/exporter';\nimport { XlsExporterService } from './exporters/xls-exporter.service';\nimport { JsonExporterService } from './exporters/json-exporter.service';\nimport { XlsxExporterService } from './exporters/xlsx-exporter.service';\n@Injectable({\n  providedIn: 'root'\n})\nexport class ServiceLocatorService {\n\n  constructor(private injector: Injector) { }\n\n  public getService(exportType: ExportType | 'xls' | 'xlsx' | 'csv' | 'txt' | 'json' | 'other'): Exporter<Options> {\n    switch (exportType) {\n      case ExportType.XLS.valueOf():\n        return this.injector.get<XlsExporterService>(XlsExporterService);\n      case ExportType.XLSX.valueOf():\n          return this.injector.get<XlsxExporterService>(XlsxExporterService);\n      case ExportType.JSON.valueOf():\n        return this.injector.get<JsonExporterService>(JsonExporterService);\n      case ExportType.TXT.valueOf():\n        return this.injector.get<TxtExporterService>(TxtExporterService);\n      case ExportType.CSV.valueOf():\n        return this.injector.get<CsvExporterService>(CsvExporterService);\n      case ExportType.OTHER.valueOf():\n        return null;\n      default:\n        return this.injector.get<XlsxExporterService>(XlsxExporterService);\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { DataRowOutlet } from '@angular/cdk/table';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataExtractorService {\n\n  constructor() { }\n\n  public extractRows(cdkTable: any, hiddenColumns: Array<any>): Array<any> {\n    return this.getRowsAsJsonArray(cdkTable, hiddenColumns, cdkTable._rowOutlet);\n  }\n\n  public extractRow(cdkTable: any, hiddenColumns: Array<any>, outlet: DataRowOutlet): Array<any> {\n    return this.getRowsAsJsonArray(cdkTable, hiddenColumns, outlet)[0];\n  }\n\n  private getRowsAsJsonArray(cdkTable: any, hiddenColumns: Array<any>, outlet: DataRowOutlet): Array<any> {\n    const renderedRows = this.getRenderedRows(cdkTable, outlet);\n    return this.convertToJsonArray(hiddenColumns, renderedRows);\n  }\n\n  private getRenderedRows(cdkTable: any, outlet: DataRowOutlet): HTMLTableRowElement[] {\n    return cdkTable._getRenderedRows(outlet) as HTMLTableRowElement[];\n  }\n\n  private convertToJsonArray(hiddenColumns: Array<any>, rows: HTMLTableRowElement[]): Array<any> {\n    const result = new Array<any>();\n    // tslint:disable-next-line:prefer-for-of\n    for (let i = 0; i < rows.length; i++) {\n      const row: Array<string> = this.convertRow(hiddenColumns, rows[i]);\n      result.push(this.createExcelItem(row));\n    }\n    return result;\n  }\n\n  private convertRow(hiddenColumns: Array<any>, row: HTMLTableRowElement): Array<string> {\n    const result = new Array<string>();\n    const cells: any = row.children;\n    for (let i = 0; i < cells.length; i++) {\n      if (!this.shouldHide(hiddenColumns, i)) {\n        const element = cells.item(i).innerText;\n        result.push(element);\n      }\n    }\n    return result;\n  }\n\n  private shouldHide(hiddenColumns: Array<any>, columnIndex: number) {\n    if (hiddenColumns && hiddenColumns.includes(columnIndex)) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  private createExcelItem(row: Array<string>): any {\n    return Object.assign({}, row);\n  }\n}\n"]}