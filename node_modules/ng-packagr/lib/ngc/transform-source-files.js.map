{"version":3,"file":"transform-source-files.js","sourceRoot":"","sources":["../../../src/lib/ngc/transform-source-files.ts"],"names":[],"mappings":";;AAAA,4CAA4C;AAC5C,iCAAiC;AAGjC,gCAAmD,KAAU;IAC3D,MAAM,CAAC,KAAK,CAAC,WAAW,YAAY,KAAK,IAAI,OAAO,KAAK,CAAC,OAAO,KAAK,UAAU,CAAC;AACnF,CAAC;AAED,8BACE,MAAyD,EACzD,YAAoD;IAEpD,EAAE,CAAC,CAAC,sBAAsB,CAAgB,MAAM,CAAC,CAAC,CAAC,CAAC;QAClD,8EAA8E;QAC9E,MAAM,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,GAAG,MAAM,CAAC,WAAW,CAAC,EAAE,YAAY,CAAC,CAAC;IAC7D,CAAC;IAAC,IAAI,CAAC,CAAC;QACN,2EAA2E;QAC3E,MAAM,QAAQ,GAAG,MAAM,CAAC;QAExB,MAAM,YAAY,GAAoB,EAAE,CAAC,kBAAkB,CAAC;YAC1D,OAAO,EAAE,QAAQ,CAAC,OAAO;SAC1B,CAAC,CAAC;QAEH,MAAM,OAAO,GAAe,EAAE,CAAC,aAAa,CAAC;YAC3C,SAAS,EAAE,CAAC,GAAG,QAAQ,CAAC,SAAS,CAAC;YAClC,OAAO,EAAE,QAAQ,CAAC,OAAO;YACzB,IAAI,EAAE,YAAY;SACnB,CAAC,CAAC;QAEH,MAAM,WAAW,GAAG,OAAO,CAAC,YAAY,EAAE,CAAC,cAAc,EAAE,CAAC;QAC5D,MAAM,oBAAoB,GAA2C,EAAE,CAAC,SAAS;QAC/E,0CAA0C;QAC1C,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,EACvB,YAAY,EACZ,QAAQ,CAAC,OAAO,CACjB,CAAC;QAEF,MAAM,CAAC,oBAAoB,CAAC;IAC9B,CAAC;AACH,CAAC;AA/BD,oDA+BC","sourcesContent":["import * as ng from '@angular/compiler-cli';\nimport * as ts from 'typescript';\nimport { TsConfig } from '../ts/tsconfig';\n\nfunction isTransformationResult<T extends ts.Node>(value: any): value is ts.TransformationResult<T> {\n  return value.transformed instanceof Array && typeof value.dispose === 'function';\n}\n\nexport function transformSourceFiles(\n  source: TsConfig | ts.TransformationResult<ts.SourceFile>,\n  transformers: ts.TransformerFactory<ts.SourceFile>[]\n): ts.TransformationResult<ts.SourceFile> {\n  if (isTransformationResult<ts.SourceFile>(source)) {\n    // Apply subsequent typescript transformation to previous TransformationResult\n    return ts.transform([...source.transformed], transformers);\n  } else {\n    // Apply initial typescript transformation to initial sources from TsConfig\n    const tsConfig = source;\n\n    const compilerHost: ng.CompilerHost = ng.createCompilerHost({\n      options: tsConfig.options\n    });\n\n    const program: ng.Program = ng.createProgram({\n      rootNames: [...tsConfig.rootNames],\n      options: tsConfig.options,\n      host: compilerHost\n    });\n\n    const sourceFiles = program.getTsProgram().getSourceFiles();\n    const transformationResult: ts.TransformationResult<ts.SourceFile> = ts.transform(\n      // XX: circumvent tsc compile error in 2.6\n      Array.from(sourceFiles),\n      transformers,\n      tsConfig.options\n    );\n\n    return transformationResult;\n  }\n}\n"]}