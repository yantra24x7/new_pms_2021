{"version":3,"file":"compile-source-files.js","sourceRoot":"","sources":["../../../src/lib/ngc/compile-source-files.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,+BAA+B;AAC/B,4CAA4C;AAE5C,6BAA6B;AAC7B,+EAA8F;AAE9F,mCAAmC;AACnC,iEAA4D;AAC5D,+FAAwF;AAExF,4BACE,WAA4B,EAC5B,QAAkB,EAClB,MAAe,EACf,cAAuB;;QAEvB,GAAG,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC,OAAO,CAAC,IAAI,GAAG,CAAC,CAAC;QAEvC,MAAM,eAAe,qBAAQ,QAAQ,CAAC,OAAO,CAAE,CAAC;QAChD,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACX,eAAe,CAAC,MAAM,GAAG,MAAM,CAAC;QAClC,CAAC;QAED,kBAAkB;QAClB,IAAI,cAAc,GAAG,uEAA2C,CAAC,WAAW,EAAE,eAAe,CAAC,CAAC;QAC/F,EAAE,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;YACnB,cAAc,GAAG,iEAA6B,CAAC,cAAc,EAAE,QAAQ,CAAC,OAAO,CAAC,OAAO,EAAE,cAAc,CAAC,CAAC;QAC3G,CAAC;QAED,kBAAkB;QAClB,MAAM,cAAc,GAAG,EAAE,CAAC,kBAAkB,CAAC;YAC3C,OAAO,EAAE,eAAe;YACxB,MAAM,EAAE,cAAc;SACvB,CAAC,CAAC;QAEH,aAAa;QACb,MAAM,SAAS,GAAG,EAAE,CAAC,aAAa,CAAC;YACjC,SAAS,EAAE,QAAQ,CAAC,SAAS;YAC7B,OAAO,EAAE,eAAe;YACxB,IAAI,EAAE,cAAc;SACrB,CAAC,CAAC;QAEH,MAAM;QACN,MAAM,MAAM,GAAG,EAAE,CAAC,kBAAkB,CAAC;YACnC,SAAS,EAAE,QAAQ,CAAC,SAAS;YAC7B,OAAO,EAAE,eAAe;YACxB,SAAS,EAAE,QAAQ,CAAC,SAAS;YAC7B,YAAY,EAAE,yCAAkB,CAAC,eAAe,CAAC;YACjD,IAAI,EAAE,cAAc;YACpB,UAAU,EAAE,SAAS;SACtB,CAAC,CAAC;QAEH,MAAM,cAAc,GAAG,eAAe,CAAC,iBAAiB,CAAC;QACzD,MAAM,uBAAuB,GAAG,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;QAE7D,iEAAiE;QACjE,sDAAsD;QACtD,MAAM,kBAAkB,GAAG,cAAc,CAAC,OAAO,CAAC,uBAAuB,EAAE,gBAAgB,CAAC,CAAC;QAC7F,MAAM,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;QACrF,MAAM,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;QACtE,EAAE,CAAC,CAAC,YAAY,KAAK,WAAW,IAAI,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;YAC/D,MAAM,EAAE,CAAC,IAAI,CAAC,WAAW,EAAE,YAAY,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;QAChE,CAAC;QAED,MAAM,QAAQ,GAAG,EAAE,CAAC,kBAAkB,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;QAC3D,MAAM,CAAC,QAAQ,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,EAAE,CAAC,iBAAiB,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;IAClH,CAAC;CAAA;AAxDD,gDAwDC","sourcesContent":["import * as fs from 'fs-extra';\nimport * as ng from '@angular/compiler-cli';\nimport * as ts from 'typescript';\nimport * as path from 'path';\nimport { createCompilerHostForSynthesizedSourceFiles } from '../ts/synthesized-compiler-host';\nimport { TsConfig } from '../ts/tsconfig';\nimport * as log from '../util/log';\nimport { createEmitCallback } from './create-emit-callback';\nimport { redirectWriteFileCompilerHost } from '../ts/redirect-write-file-compiler-host';\n\nexport async function compileSourceFiles(\n  sourceFiles: ts.SourceFile[],\n  tsConfig: TsConfig,\n  outDir?: string,\n  declarationDir?: string\n) {\n  log.debug(`ngc (v${ng.VERSION.full})`);\n\n  const tsConfigOptions = { ...tsConfig.options };\n  if (outDir) {\n    tsConfigOptions.outDir = outDir;\n  }\n\n  // ts.CompilerHost\n  let tsCompilerHost = createCompilerHostForSynthesizedSourceFiles(sourceFiles, tsConfigOptions);\n  if (declarationDir) {\n    tsCompilerHost = redirectWriteFileCompilerHost(tsCompilerHost, tsConfig.options.baseUrl, declarationDir);\n  }\n\n  // ng.CompilerHost\n  const ngCompilerHost = ng.createCompilerHost({\n    options: tsConfigOptions,\n    tsHost: tsCompilerHost\n  });\n\n  // ng.Program\n  const ngProgram = ng.createProgram({\n    rootNames: tsConfig.rootNames,\n    options: tsConfigOptions,\n    host: ngCompilerHost\n  });\n\n  // ngc\n  const result = ng.performCompilation({\n    rootNames: tsConfig.rootNames,\n    options: tsConfigOptions,\n    emitFlags: tsConfig.emitFlags,\n    emitCallback: createEmitCallback(tsConfigOptions),\n    host: ngCompilerHost,\n    oldProgram: ngProgram\n  });\n\n  const flatModuleFile = tsConfigOptions.flatModuleOutFile;\n  const flatModuleFileExtension = path.extname(flatModuleFile);\n\n  // XX(hack): redirect the `*.metadata.json` to the correct outDir\n  // @link https://github.com/angular/angular/pull/21787\n  const metadataBundleFile = flatModuleFile.replace(flatModuleFileExtension, '.metadata.json');\n  const metadataSrc = path.resolve(tsConfigOptions.declarationDir, metadataBundleFile);\n  const metadataDest = path.resolve(declarationDir, metadataBundleFile);\n  if (metadataDest !== metadataSrc && fs.existsSync(metadataSrc)) {\n    await fs.move(metadataSrc, metadataDest, { overwrite: true });\n  }\n\n  const exitCode = ng.exitCodeFromResult(result.diagnostics);\n  return exitCode === 0 ? Promise.resolve() : Promise.reject(new Error(ng.formatDiagnostics(result.diagnostics)));\n}\n"]}