{"version":3,"file":"transform.js","sourceRoot":"","sources":["../../../src/lib/brocc/transform.ts"],"names":[],"mappings":";;AAEA,6DAA0D;AAC1D,2CAAwD;AACxD,8CAAgD;AAChD,yCAAsC;AAqBzB,QAAA,oBAAoB,GAAG,CAAC,WAAkC,EAAa,EAAE,CACpF,WAAI,CACF,qBAAS,CAAC,KAAK,CAAC,EAAE;IAChB,MAAM,eAAe,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC;IAE3C,EAAE,CAAC,CAAC,eAAe,YAAY,OAAO,CAAC,CAAC,CAAC;QACvC,MAAM,CAAC,yBAAW,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,eAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACrF,CAAC;IAAC,IAAI,CAAC,CAAC;QACN,MAAM,CAAC,OAAY,CAAC,eAAe,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;IACjE,CAAC;AACH,CAAC,CAAC,CACH,CAAC","sourcesContent":["import { MonoTypeOperatorFunction } from 'rxjs/interfaces';\nimport { Observable } from 'rxjs/Observable';\nimport { fromPromise } from 'rxjs/observable/fromPromise';\nimport { of as observableOf } from 'rxjs/observable/of';\nimport { map, switchMap } from 'rxjs/operators';\nimport { pipe } from 'rxjs/util/pipe';\nimport { BuildGraph } from './build-graph';\n\n/**\n * A tranformation applied over the build graph.\n *\n * By design, a pipeable operator over `BuildGraph`.\n *  - A transformation takes a `BuildGraph` as input (from previous transformations).\n *  - A transformation performs some operations based on the graph's data, potentially modifying nodes in the graph.\n *  - It returns a `BuildGraph` that will be passed to subsequent transformations.\n *\n * @link https://github.com/ReactiveX/rxjs/blob/master/doc/pipeable-operators.md#pipeable-operators\n */\nexport interface Transform extends MonoTypeOperatorFunction<BuildGraph> {\n  (source$: Observable<BuildGraph>): Observable<BuildGraph>;\n}\n\nexport interface PromiseBasedTransform {\n  (graph: BuildGraph): Promise<BuildGraph | void> | BuildGraph | void;\n}\n\nexport const transformFromPromise = (transformFn: PromiseBasedTransform): Transform =>\n  pipe(\n    switchMap(graph => {\n      const transformResult = transformFn(graph);\n\n      if (transformResult instanceof Promise) {\n        return fromPromise(transformResult).pipe(map(result => (result ? result : graph)));\n      } else {\n        return observableOf(transformResult ? transformResult : graph);\n      }\n    })\n  );\n"]}