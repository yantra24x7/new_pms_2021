{"version":3,"file":"entry-point.transform.js","sourceRoot":"","sources":["../../../src/lib/ng-v5/entry-point.transform.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,yCAA+C;AAC/C,wCAA2C;AAC3C,4CAA+C;AAC/C,kDAAqE;AACrE,mCAAmC;AACnC,mCAAuC;AAEvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAoCG;AACU,QAAA,0BAA0B,GAAG,CACxC,iBAA4B,EAC5B,eAA0B,EAC1B,kBAA6B,EAC7B,SAAoB,EACpB,WAAsB,EACtB,YAAuB,EACvB,eAA0B,EAC1B,kBAA6B,EAC7B,YAAuB,EACZ,EAAE,CACb,oBAAa,CAAC;IACZ,+DAA+D;IAE/D,gCAAoB,CAAC,CAAM,KAAK,EAAC,EAAE;QACjC,4CAA4C;QAC5C,MAAM,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC,oBAAY,EAAE,CAAC,GAAG,CAAC,qBAAY,CAAC,CAAC,CAAC;QAChE,GAAG,CAAC,IAAI,CAAC,yBAAyB,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,GAAG,CAAC,CAAC;IAC5E,CAAC,CAAA,CAAC;IACF,oCAAoC;IACpC,iBAAiB;IACjB,eAAe;IACf,wCAAwC;IACxC,kBAAkB;IAClB,iCAAiC;IACjC,SAAS;IACT,0BAA0B;IAC1B,WAAW;IACX,+CAA+C;IAC/C,YAAY;IACZ,eAAe;IACf,kBAAkB;IAClB,YAAY;IAEZ,gCAAoB,CAAC,CAAM,KAAK,EAAC,EAAE;QACjC,MAAM,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC,oBAAY,EAAE,CAAC,GAAG,CAAC,qBAAY,CAAC,CAAC,CAAC;QAChE,UAAU,CAAC,KAAK,GAAG,iBAAU,CAAC;IAChC,CAAC,CAAA,CAAC;IAEF,+BAA+B;CAChC,CAAC,CAAC","sourcesContent":["import { pipeFromArray } from 'rxjs/util/pipe';\nimport { STATE_DONE } from '../brocc/node';\nimport { isInProgress } from '../brocc/select';\nimport { Transform, transformFromPromise } from '../brocc/transform';\nimport * as log from '../util/log';\nimport { byEntryPoint } from './nodes';\n\n/**\n * A re-write of the `transformSources()` script that transforms an entry point from sources to distributable format.\n *\n * Sources are TypeScript source files accompanied by HTML templates and xCSS stylesheets.\n * See the Angular Package Format for a detailed description of what the distributables include.\n *\n * The current transformation pipeline can be thought of as:\n *\n *  - clean\n *  - renderTemplates\n *  - renderStylesheets\n *  - transformTsSources (thereby inlining template and stylesheet data)\n *  - compileTs\n *  - downlevelTs\n *  - writeBundles\n *    - bundleToFesm15\n *    - bundleToFesm5\n *    - bundleToUmd\n *    - bundleToUmdMin\n *  - relocateSourceMaps\n *  - writePackage\n *   - copyStagedFiles (bundles, esm, dts, metadata, sourcemaps)\n *   - writePackageJson\n *\n * The transformation pipeline is pluggable through the dependency injection system.\n * Sub-transformations are passed to this factory function as arguments.\n *\n * @param renderTemplates Transformation rendering HTML templates.\n * @param renderStylesheets Transformation rendering xCSS stylesheets.\n * @param transformTsSources Transformation manipulating the typescript source files (thus inlining template and stylesheet data).\n * @param compileTs Transformation compiling typescript sources to ES2015 modules.\n * @param downlevelTs Transformation downlevel compilation from ES2015 TO ESM5.\n * @param writeBundles Transformation flattening ES2015 modules to ESM2015, ESM5, UMD, and minified UMD.\n * @param remapSourceMaps Transformation re-mapping of sourcemaps over a series of transpilations.\n * @param relocateSourceMaps Transformation re-locating (adapting) paths in the source maps.\n * @param writePackage Transformation writing a distribution-ready `package.json` (for publishing to npm registry).\n */\nexport const entryPointTransformFactory = (\n  renderStylesheets: Transform,\n  renderTemplates: Transform,\n  transformTsSources: Transform,\n  compileTs: Transform,\n  downlevelTs: Transform,\n  writeBundles: Transform,\n  remapSourceMaps: Transform,\n  relocateSourceMaps: Transform,\n  writePackage: Transform\n): Transform =>\n  pipeFromArray([\n    //tap(() => log.info(`Building from sources for entry point`)),\n\n    transformFromPromise(async graph => {\n      // Peek the first entry point from the graph\n      const entryPoint = graph.find(byEntryPoint().and(isInProgress));\n      log.info(`Building entry point '${entryPoint.data.entryPoint.moduleId}'`);\n    }),\n    // Stylesheet and template rendering\n    renderStylesheets,\n    renderTemplates,\n    // Inlining of stylesheets and templates\n    transformTsSources,\n    // TypeScript sources compilation\n    compileTs,\n    // Downlevel es2015 to es5\n    downlevelTs,\n    // After TypeScript: bundling and write package\n    writeBundles,\n    remapSourceMaps,\n    relocateSourceMaps,\n    writePackage,\n\n    transformFromPromise(async graph => {\n      const entryPoint = graph.find(byEntryPoint().and(isInProgress));\n      entryPoint.state = STATE_DONE;\n    })\n\n    //tap(() => log.info(`Built.`))\n  ]);\n"]}