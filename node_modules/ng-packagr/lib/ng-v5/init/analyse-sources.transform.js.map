{"version":3,"file":"analyse-sources.transform.js","sourceRoot":"","sources":["../../../../src/lib/ng-v5/init/analyse-sources.transform.ts"],"names":[],"mappings":";;AAAA,8CAAqC;AACrC,yCAAsC;AACtC,sCAAsC;AAEtC,6EAAwE;AACxE,gGAAgF;AAChF,gFAAkF;AAClF,oCAA4G;AAE/F,QAAA,uBAAuB,GAAc,WAAI,CACpD,eAAG,CAAC,KAAK,CAAC,EAAE;IACV,MAAM,WAAW,GAAG,KAAK,CAAC,MAAM,CAAC,oBAAY,CAAC,CAAC;IAC/C,GAAG,CAAC,CAAC,IAAI,UAAU,IAAI,WAAW,CAAC,CAAC,CAAC;QACnC,GAAG,CAAC,KAAK,CAAC,yBAAyB,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;QAE1E,yEAAyE;QACzE,MAAM,gBAAgB,GAAG,wDAA6B,CAAC;YACrD,QAAQ,EAAE,CAAC,EAAE,gBAAgB,EAAE,EAAE,EAAE;gBACjC,MAAM,YAAY,GAAG,IAAI,oBAAY,CAAC,eAAO,CAAC,gBAAgB,CAAC,CAAC,CAAC;gBACjE,KAAK,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;gBAExB,uCAAuC;gBACvC,UAAU,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;YACrC,CAAC;YACD,UAAU,EAAE,CAAC,EAAE,aAAa,EAAE,EAAE,EAAE;gBAChC,MAAM,cAAc,GAAG,IAAI,sBAAc,CAAC,eAAO,CAAC,aAAa,CAAC,CAAC,CAAC;gBAClE,KAAK,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;gBAE1B,uCAAuC;gBACvC,UAAU,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;YACvC,CAAC;SACF,CAAC,CAAC;QAEH,iFAAiF;QACjF,MAAM,mBAAmB,GAAG,sDAAmB,CAAC,CAAC,UAAU,EAAE,QAAQ,EAAE,EAAE;YACvE,GAAG,CAAC,KAAK,CAAC,uBAAuB,UAAU,CAAC,QAAQ,KAAK,QAAQ,EAAE,CAAC,CAAC;YACrE,MAAM,GAAG,GAAG,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,KAAK,QAAQ,CAAC,CAAC;YAC7E,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACR,GAAG,CAAC,KAAK,CACP,iCAAiC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,OAAO,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAC1G,CAAC;gBACF,UAAU,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;YAC5B,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,mFAAmF;QACnF,MAAM,aAAa,GAAG,IAAI,4BAAoB,CAAC,aAAK,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC3F,aAAa,CAAC,IAAI,GAAG,6CAAoB,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,gBAAgB,EAAE,mBAAmB,CAAC,CAAC,CAAC;QAC7G,KAAK,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;QACzB,UAAU,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;IACtC,CAAC;IAED,MAAM,CAAC,KAAK,CAAC;AACf,CAAC,CAAC,CACH,CAAC","sourcesContent":["import { map } from 'rxjs/operators';\nimport { pipe } from 'rxjs/util/pipe';\nimport * as log from '../../util/log';\nimport { Transform } from '../../brocc/transform';\nimport { transformSourceFiles } from '../../ngc/transform-source-files';\nimport { analyseDependencies } from '../../ts/analyse-dependencies-transformer';\nimport { transformComponentSourceFiles } from '../../ts/ng-component-transformer';\nimport { isEntryPoint, TemplateNode, StylesheetNode, TypeScriptSourceNode, fileUrl, tsUrl } from '../nodes';\n\nexport const analyseSourcesTransform: Transform = pipe(\n  map(graph => {\n    const entryPoints = graph.filter(isEntryPoint);\n    for (let entryPoint of entryPoints) {\n      log.debug(`Analysing sources for ${entryPoint.data.entryPoint.moduleId}`);\n\n      // Extracts templateUrl and styleUrls from `@Component({..})` decorators.\n      const extractResources = transformComponentSourceFiles({\n        template: ({ templateFilePath }) => {\n          const templateNode = new TemplateNode(fileUrl(templateFilePath));\n          graph.put(templateNode);\n\n          // mark that entryPoint depends on node\n          entryPoint.dependsOn(templateNode);\n        },\n        stylesheet: ({ styleFilePath }) => {\n          const stylesheetNode = new StylesheetNode(fileUrl(styleFilePath));\n          graph.put(stylesheetNode);\n\n          // mark that entryPoint depends on node\n          entryPoint.dependsOn(stylesheetNode);\n        }\n      });\n\n      // Extract TypeScript dependencies from source text (`import .. from 'moduleId'`)\n      const extractDependencies = analyseDependencies((sourceFile, moduleId) => {\n        log.debug(`Found dependency in ${sourceFile.fileName}: ${moduleId}`);\n        const dep = entryPoints.find(ep => ep.data.entryPoint.moduleId === moduleId);\n        if (dep) {\n          log.debug(\n            `Found entry point dependency: ${entryPoint.data.entryPoint.moduleId} -> ${dep.data.entryPoint.moduleId}`\n          );\n          entryPoint.dependsOn(dep);\n        }\n      });\n\n      // TODO: a typescript `SourceFile` may also be added as individual nod to the graph\n      const tsSourcesNode = new TypeScriptSourceNode(tsUrl(entryPoint.data.entryPoint.moduleId));\n      tsSourcesNode.data = transformSourceFiles(entryPoint.data.tsConfig, [extractResources, extractDependencies]);\n      graph.put(tsSourcesNode);\n      entryPoint.dependsOn(tsSourcesNode);\n    }\n\n    return graph;\n  })\n);\n"]}