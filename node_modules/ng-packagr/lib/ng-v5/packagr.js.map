{"version":3,"file":"packagr.js","sourceRoot":"","sources":["../../../src/lib/ng-v5/packagr.ts"],"names":[],"mappings":";;AACA,+CAA4E;AAC5E,2CAAwD;AACxD,8CAAuD;AACvD,sDAAkD;AAGlD,mCAAmC;AACnC,8DAA0D;AAC1D,qDAAyD;AACzD,6CAAoE;AACpE,6CAA8C;AAE9C;;;;;;GAMG;AACH;IAGE,YAAoB,SAAqB;QAArB,cAAS,GAAT,SAAS,CAAY;QAFjC,mBAAc,GAA8B,8BAAiB,CAAC,OAAO,CAAC;IAElC,CAAC;IAE7C;;;;;OAKG;IACI,UAAU,CAAC,OAAe;QAC/B,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,2BAAc,CAAC,OAAO,CAAC,CAAC,CAAC;QAE7C,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED;;;;;;OAMG;IACI,aAAa,CAAC,SAAqB;QACxC,IAAI,CAAC,SAAS,GAAG,CAAC,GAAG,IAAI,CAAC,SAAS,EAAE,GAAG,SAAS,CAAC,CAAC;QAEnD,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED;;;;;OAKG;IACI,YAAY,CAAC,aAAgC;QAClD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,kCAAe,CAAC,aAAa,CAAC,CAAC,CAAC;QAEpD,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED;;;;;OAKG;IACI,kBAAkB,CAAC,SAAoC;QAC5D,IAAI,CAAC,cAAc,GAAG,SAAS,CAAC;QAEhC,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED;;;;OAIG;IACI,KAAK;QACV,MAAM,QAAQ,GAAG,iCAAkB,CAAC,gBAAgB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACrE,MAAM,sBAAsB,GAAG,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAEjE,MAAM,CAAC,OAAY,CAAC,IAAI,wBAAU,EAAE,CAAC;aAClC,IAAI,CACH,sBAAsB,EACtB,gBAAI,CAAC,CAAC,CAAC,EACP,sBAAU,CAAC,GAAG,CAAC,EAAE;YACf,2CAA2C;YAC3C,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACf,MAAM,GAAG,CAAC;QACZ,CAAC,CAAC,EACF,eAAG,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC,CACd;aACA,SAAS,EAAE,CAAC;IACjB,CAAC;CACF;AA5ED,8BA4EC;AAEY,QAAA,SAAS,GAAG,GAAc,EAAE,CACvC,IAAI,SAAS,CAAC;IACZ,sCAAsC;IACtC,GAAG,8BAAiB;IACpB,GAAG,sCAAqB;CACzB,CAAC,CAAC","sourcesContent":["import { ParsedConfiguration } from '@angular/compiler-cli';\nimport { InjectionToken, Provider, ReflectiveInjector } from 'injection-js';\nimport { of as observableOf } from 'rxjs/observable/of';\nimport { take, map, catchError } from 'rxjs/operators';\nimport { BuildGraph } from '../brocc/build-graph';\nimport { Transform } from '../brocc/transform';\nimport { TsConfig } from '../ts/tsconfig';\nimport * as log from '../util/log';\nimport { provideTsConfig } from './init/init-tsconfig.di';\nimport { ENTRY_POINT_PROVIDERS } from './entry-point.di';\nimport { PACKAGE_TRANSFORM, PACKAGE_PROVIDERS } from './package.di';\nimport { provideProject } from './project.di';\n\n/**\n * The original ng-packagr implemented on top of a rxjs-ified and di-jectable transformation pipeline.\n *\n * See the `docs/transformations.md` for more prose description.\n *\n * @link https://github.com/dherges/ng-packagr/pull/572\n */\nexport class NgPackagr {\n  private buildTransform: InjectionToken<Transform> = PACKAGE_TRANSFORM.provide;\n\n  constructor(private providers: Provider[]) {}\n\n  /**\n   * Sets the path to the user's \"ng-package\" file (either `package.json`, `ng-package.json`, or `ng-package.js`)\n   *\n   * @param project File path\n   * @return Self instance for fluent API\n   */\n  public forProject(project: string): NgPackagr {\n    this.providers.push(provideProject(project));\n\n    return this;\n  }\n\n  /**\n   * Adds dependency injection providers.\n   *\n   * @param providers\n   * @return Self instance for fluent API\n   * @link https://github.com/mgechev/injection-js\n   */\n  public withProviders(providers: Provider[]): NgPackagr {\n    this.providers = [...this.providers, ...providers];\n\n    return this;\n  }\n\n  /**\n   * Overwrites the default TypeScript configuration.\n   *\n   * @param defaultValues A tsconfig providing default values to the compilation.\n   * @return Self instance for fluent API\n   */\n  public withTsConfig(defaultValues: TsConfig | string): NgPackagr {\n    this.providers.push(provideTsConfig(defaultValues));\n\n    return this;\n  }\n\n  /**\n   * Overwrites the 'build' transform.\n   *\n   * @param transform\n   * @return Self intance for fluent API\n   */\n  public withBuildTransform(transform: InjectionToken<Transform>): NgPackagr {\n    this.buildTransform = transform;\n\n    return this;\n  }\n\n  /**\n   * Builds the project by kick-starting the 'build' transform over an (initially) empty `BuildGraph``\n   *\n   * @return A promisified result of the transformation pipeline.\n   */\n  public build(): Promise<void> {\n    const injector = ReflectiveInjector.resolveAndCreate(this.providers);\n    const buildTransformOperator = injector.get(this.buildTransform);\n\n    return observableOf(new BuildGraph())\n      .pipe(\n        buildTransformOperator,\n        take(1),\n        catchError(err => {\n          // Report error and re-throw to subscribers\n          log.error(err);\n          throw err;\n        }),\n        map(() => {})\n      )\n      .toPromise();\n  }\n}\n\nexport const ngPackagr = (): NgPackagr =>\n  new NgPackagr([\n    // Add default providers to this list.\n    ...PACKAGE_PROVIDERS,\n    ...ENTRY_POINT_PROVIDERS\n  ]);\n"]}