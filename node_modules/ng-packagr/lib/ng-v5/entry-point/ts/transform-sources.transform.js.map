{"version":3,"file":"transform-sources.transform.js","sourceRoot":"","sources":["../../../../../src/lib/ng-v5/entry-point/ts/transform-sources.transform.ts"],"names":[],"mappings":";;AAAA,8CAAqC;AACrC,yCAAsC;AAEtC,yCAAyC;AACzC,gFAA2E;AAC3E,mFAAqF;AACrF,uCAMqB;AAER,QAAA,yBAAyB,GAAc,WAAI,CACtD,eAAG,CAAC,KAAK,CAAC,EAAE;IACV,MAAM,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC,8BAAsB,EAAE,CAAmB,CAAC;IAC1E,GAAG,CAAC,KAAK,CAAC,uCAAuC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;IAExF,mDAAmD;IACnD,MAAM,eAAe,GAAG,wDAA6B,CAAC;QACpD,QAAQ,EAAE,CAAC,EAAE,gBAAgB,EAAE,EAAE,EAAE;YACjC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,KAAK,eAAO,CAAC,gBAAgB,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;QACtF,CAAC;QACD,UAAU,EAAE,CAAC,EAAE,aAAa,EAAE,EAAE,EAAE;YAChC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,KAAK,eAAO,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;QACnF,CAAC;KACF,CAAC,CAAC;IAEH,wBAAwB;IACxB,MAAM,SAAS,GAAG,UAAU,CAAC,IAAI,CAAC,2BAAmB,CAAyB,CAAC;IAC/E,MAAM,iBAAiB,GAAG,SAAS,CAAC,IAAI,CAAC;IAEzC,qCAAqC;IACrC,SAAS,CAAC,IAAI,GAAG,6CAAoB,CAAC,iBAAiB,EAAE,CAAC,eAAe,CAAC,CAAC,CAAC;IAE5E,6CAA6C;IAC7C,iBAAiB,CAAC,OAAO,EAAE,CAAC;IAE5B,MAAM,CAAC,KAAK,CAAC;AACf,CAAC,CAAC,CACH,CAAC","sourcesContent":["import { map } from 'rxjs/operators';\nimport { pipe } from 'rxjs/util/pipe';\nimport { Transform } from '../../../brocc/transform';\nimport * as log from '../../../util/log';\nimport { transformSourceFiles } from '../../../ngc/transform-source-files';\nimport { transformComponentSourceFiles } from '../../../ts/ng-component-transformer';\nimport {\n  isEntryPointInProgress,\n  fileUrl,\n  isTypeScriptSources,\n  TypeScriptSourceNode,\n  EntryPointNode\n} from '../../nodes';\n\nexport const transformSourcesTransform: Transform = pipe(\n  map(graph => {\n    const entryPoint = graph.find(isEntryPointInProgress()) as EntryPointNode;\n    log.debug(`Transforming TypeScript sources for ${entryPoint.data.entryPoint.moduleId}`);\n\n    // Transformer that inlines template and style data\n    const inlineResources = transformComponentSourceFiles({\n      template: ({ templateFilePath }) => {\n        return entryPoint.find(node => node.url === fileUrl(templateFilePath)).data.content;\n      },\n      stylesheet: ({ styleFilePath }) => {\n        return entryPoint.find(node => node.url === fileUrl(styleFilePath)).data.content;\n      }\n    });\n\n    // TypeScriptSourcesNode\n    const tsSources = entryPoint.find(isTypeScriptSources) as TypeScriptSourceNode;\n    const previousTransform = tsSources.data;\n\n    // Modify the TypeScript source files\n    tsSources.data = transformSourceFiles(previousTransform, [inlineResources]);\n\n    // Dispose the previous transformation result\n    previousTransform.dispose();\n\n    return graph;\n  })\n);\n"]}