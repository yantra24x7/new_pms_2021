{"version":3,"file":"compile-ngc.transform.js","sourceRoot":"","sources":["../../../../../src/lib/ng-v5/entry-point/ts/compile-ngc.transform.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,6BAA6B;AAC7B,wDAA2E;AAC3E,4EAAuE;AAEvE,yCAAyC;AACzC,uCAMqB;AAER,QAAA,mBAAmB,GAAc,gCAAoB,CAAC,CAAM,KAAK,EAAC,EAAE;IAC/E,GAAG,CAAC,IAAI,CAAC,0CAA0C,CAAC,CAAC;IACrD,MAAM,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC,8BAAsB,EAAE,CAAmB,CAAC;IAC1E,MAAM,SAAS,GAAG,UAAU,CAAC,IAAI,CAAC,2BAAmB,CAAyB,CAAC;IAC/E,MAAM,QAAQ,GAAa,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC;IAEpD,sCAAsC;IACtC,MAAM,cAAc,GAAG,UAAU,CAAC,MAAM,CAAC,oBAAY,CAAqB,CAAC;IAC3E,EAAE,CAAC,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;QAC9B,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;YAC5B,QAAQ,CAAC,OAAO,CAAC,KAAK,GAAG,EAAE,CAAC;QAC9B,CAAC;QAED,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,cAAc,CAAC,CAAC,CAAC;YAC/B,MAAM,EAAE,UAAU,EAAE,gBAAgB,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;YAClD,MAAM,WAAW,GAAG,UAAU,CAAC,QAAQ,CAAC;YACxC,MAAM,UAAU,GAAG,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC;YAEnD,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;gBACzC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,GAAG,UAAU,CAAC;YACnD,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;YACzD,CAAC;QACH,CAAC;IACH,CAAC;IAED,6BAA6B;IAC7B,MAAM,EAAE,OAAO,EAAE,YAAY,EAAE,GAAG,UAAU,CAAC,IAAI,CAAC,gBAAgB,CAAC;IACnE,MAAM,iBAAiB,GAAG,SAAS,CAAC,IAAI,CAAC;IACzC,MAAM,yCAAkB,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,EAAE,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC;IAClH,iBAAiB,CAAC,OAAO,EAAE,CAAC;IAE5B,MAAM,CAAC,KAAK,CAAC;AACf,CAAC,CAAA,CAAC,CAAC","sourcesContent":["import * as path from 'path';\nimport { Transform, transformFromPromise } from '../../../brocc/transform';\nimport { compileSourceFiles } from '../../../ngc/compile-source-files';\nimport { TsConfig } from '../../../ts/tsconfig';\nimport * as log from '../../../util/log';\nimport {\n  isEntryPointInProgress,\n  isTypeScriptSources,\n  TypeScriptSourceNode,\n  isEntryPoint,\n  EntryPointNode\n} from '../../nodes';\n\nexport const compileNgcTransform: Transform = transformFromPromise(async graph => {\n  log.info(`Compiling TypeScript sources through ngc`);\n  const entryPoint = graph.find(isEntryPointInProgress()) as EntryPointNode;\n  const tsSources = entryPoint.find(isTypeScriptSources) as TypeScriptSourceNode;\n  const tsConfig: TsConfig = entryPoint.data.tsConfig;\n\n  // Add paths mappings for dependencies\n  const entryPointDeps = entryPoint.filter(isEntryPoint) as EntryPointNode[];\n  if (entryPointDeps.length > 0) {\n    if (!tsConfig.options.paths) {\n      tsConfig.options.paths = {};\n    }\n\n    for (let dep of entryPointDeps) {\n      const { entryPoint, destinationFiles } = dep.data;\n      const depModuleId = entryPoint.moduleId;\n      const mappedPath = [destinationFiles.declarations];\n\n      if (!tsConfig.options.paths[depModuleId]) {\n        tsConfig.options.paths[depModuleId] = mappedPath;\n      } else {\n        tsConfig.options.paths[depModuleId].concat(mappedPath);\n      }\n    }\n  }\n\n  // Compile TypeScript sources\n  const { esm2015, declarations } = entryPoint.data.destinationFiles;\n  const previousTransform = tsSources.data;\n  await compileSourceFiles(tsSources.data.transformed, tsConfig, path.dirname(esm2015), path.dirname(declarations));\n  previousTransform.dispose();\n\n  return graph;\n});\n"]}