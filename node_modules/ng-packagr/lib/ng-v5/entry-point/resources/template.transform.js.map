{"version":3,"file":"template.transform.js","sourceRoot":"","sources":["../../../../../src/lib/ng-v5/entry-point/resources/template.transform.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,uCAAoC;AACpC,sCAAuC;AACvC,wDAA2E;AAC3E,yCAAyC;AACzC,uCAAwE;AAE3D,QAAA,iBAAiB,GAAc,gCAAoB,CAAC,CAAM,KAAK,EAAC,EAAE;IAC7E,GAAG,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;IAEhC,MAAM,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC,8BAAsB,EAAE,CAAC,CAAC;IACxD,MAAM,aAAa,GAAG,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,KAAK,WAAW,IAAI,IAAI,CAAC,KAAK,KAAK,MAAM,CAAC,CAAC;IAEhH,4BAA4B;IAC5B,MAAM,QAAQ,GAAG,aAAa,CAAC,GAAG,CAAC,YAAY,CAAC,EAAE;QAChD,MAAM,gBAAgB,GAAG,YAAY,CAAC,GAAG,CAAC,SAAS,CAAC,yBAAiB,CAAC,MAAM,CAAC,CAAC;QAE9E,MAAM,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;YAClD,YAAY,CAAC,IAAI,qBACZ,YAAY,CAAC,IAAI,IACpB,OAAO,EAAE,GAAG,GACb,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAE5B,MAAM,CAAC,KAAK,CAAC;AACf,CAAC,CAAA,CAAC,CAAC;AAEH;;;;;GAKG;AACH,yBAA+B,gBAAwB;;QACrD,MAAM,MAAM,GAAG,MAAM,mBAAQ,CAAC,gBAAgB,CAAC,CAAC;QAEhD,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;IACrC,CAAC;CAAA","sourcesContent":["import { readFile } from 'fs-extra';\nimport stripBom = require('strip-bom');\nimport { Transform, transformFromPromise } from '../../../brocc/transform';\nimport * as log from '../../../util/log';\nimport { isEntryPointInProgress, URL_PROTOCOL_FILE } from '../../nodes';\n\nexport const templateTransform: Transform = transformFromPromise(async graph => {\n  log.info(`Rendering Templates`);\n\n  const entryPoint = graph.find(isEntryPointInProgress());\n  const templateNodes = graph.from(entryPoint).filter(node => node.type === 'text/html' && node.state !== 'done');\n\n  // TOTO [].forEach(async fn)\n  const promises = templateNodes.map(templateNode => {\n    const templateFilePath = templateNode.url.substring(URL_PROTOCOL_FILE.length);\n\n    return processTemplate(templateFilePath).then(val => {\n      templateNode.data = {\n        ...templateNode.data,\n        content: val\n      };\n    });\n  });\n\n  await Promise.all(promises);\n\n  return graph;\n});\n\n/**\n * Process a component's template.\n *\n * @param templateFilePath Path of the HTML templatefile, e.g. `/Users/foo/Project/bar/bar.component.html`\n * @return Resolved content of HTML template file\n */\nasync function processTemplate(templateFilePath: string): Promise<string> {\n  const buffer = await readFile(templateFilePath);\n\n  return stripBom(buffer.toString());\n}\n"]}