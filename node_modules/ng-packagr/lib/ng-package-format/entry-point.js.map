{"version":3,"file":"entry-point.js","sourceRoot":"","sources":["../../../src/lib/ng-package-format/entry-point.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from 'path';\nimport { SchemaClass } from '@ngtools/json-schema';\nimport { NgPackageConfig } from '../../ng-package.schema';\nimport { DirectoryPath, SourceFilePath, CssUrl, DestinationFiles } from './shared';\n\n/**\n * An entry point - quoting Angular Package Format - is:\n *\n * > a module intended to be imported by the user. It is referenced by a unique module ID and\n * > exports the public API referenced by that module ID. An example is `@angular/core` or\n * > `@angular/core/testing`. Both entry points exist in the `@angular/core` package, but they\n * > export different symbols. A package can have many entry points.\n *\n * #### Public API, source file tree and build output\n *\n * An entry point serves as the root of a source tree.\n * The entry point's public API references one TypeScript source file (`*.ts`).\n * That source file, e.g. `public_api.ts`, references other source files who in turn may reference\n * other source files, thus creating a tree of source code files.\n * The source files may be TypeScript (`*.ts`), Templates (`.html`) or Stylesheets\n * (`.css`, `.scss`, ..), or other formats.\n *\n * The compilation process for an entry point is a series of transformations applied to the source\n * files, e.g. TypeScript compilation, Inlining of Stylesheets and Templates, and so on.\n * As a result of the compilation process, an entry point is transpiled to a set of artefacts\n * (the build output) which include a FESM'15 Bundle, a FESM'5 Bundle, AoT metadata, TypeScript\n * type definitions, and so on.\n *\n * #### Representation in the domain\n *\n * The set of artefacts is reflected by `NgArtefacts`;\n * one `NgEntryPoint` relates to one `NgArtefacts`.\n * The parent package of an entry point is reflected by `NgPackage`.\n */\nexport class NgEntryPoint {\n  constructor(\n    public readonly packageJson: any,\n    public readonly ngPackageJson: NgPackageConfig,\n    private readonly $schema: SchemaClass<NgPackageConfig>,\n    public readonly basePath: string,\n    private readonly secondaryData?: { [key: string]: any }\n  ) {}\n\n  /** Absolute file path of the entry point's source code entry file. */\n  public get entryFilePath(): SourceFilePath {\n    return path.resolve(this.basePath, this.entryFile);\n  }\n\n  /** Absolute directory path of this entry point's 'package.json'. */\n  public get destinationPath(): DirectoryPath {\n    if (this.secondaryData) {\n      return this.secondaryData.destinationPath;\n    } else {\n      return path.resolve(this.basePath, this.$get('dest'));\n    }\n  }\n\n  public get destinationFiles(): DestinationFiles {\n    let primaryDestPath = this.destinationPath;\n    let secondaryDir = '';\n\n    if (this.secondaryData) {\n      primaryDestPath = this.secondaryData.primaryDestinationPath;\n      secondaryDir = path.basename(this.secondaryData.destinationPath);\n    }\n\n    const flatModuleFile = this.flatModuleFile;\n    const pathJoinWithDest = (...paths: string[]) => path.join(primaryDestPath, ...paths);\n\n    return {\n      metadata: pathJoinWithDest(secondaryDir, `${flatModuleFile}.metadata.json`),\n      declarations: pathJoinWithDest(secondaryDir, `${flatModuleFile}.d.ts`),\n      esm2015: pathJoinWithDest('esm2015', secondaryDir, `${flatModuleFile}.js`),\n      esm5: pathJoinWithDest('esm5', secondaryDir, `${flatModuleFile}.js`),\n      fesm2015: pathJoinWithDest('fesm2015', `${flatModuleFile}.js`),\n      fesm5: pathJoinWithDest('fesm5', `${flatModuleFile}.js`),\n      umd: pathJoinWithDest('bundles', `${flatModuleFile}.umd.js`),\n      umdMinified: pathJoinWithDest('bundles', `${flatModuleFile}.umd.min.js`)\n    };\n  }\n\n  public $get(key: string): any {\n    return this.$schema.$$get(key);\n  }\n\n  public get entryFile(): SourceFilePath {\n    return this.$get('lib.entryFile');\n  }\n\n  public get cssUrl(): CssUrl {\n    return this.$get('lib.cssUrl');\n  }\n\n  public get umdModuleIds(): { [key: string]: string } {\n    return this.$get('lib.umdModuleIds');\n  }\n\n  public get jsxConfig(): string {\n    return this.$get('lib.jsx');\n  }\n\n  public get flatModuleFile(): string {\n    return this.$get('lib.flatModuleFile') || this.flattenModuleId('-');\n  }\n\n  public get styleIncludePaths(): string[] {\n    const includePaths = this.$get('lib.styleIncludePaths') || [];\n    return includePaths.map(\n      includePath => (path.isAbsolute(includePath) ? includePath : path.resolve(this.basePath, includePath))\n    );\n  }\n\n  public get languageLevel(): string[] {\n    return this.$get('lib.languageLevel');\n  }\n\n  /**\n   * The module ID is an \"identifier of a module used in the import statements, e.g.\n   * '@angular/core'. The ID often maps directly to a path on the filesystem, but this\n   * is not always the case due to various module resolution strategies.\"\n   */\n  public get moduleId(): string {\n    if (this.secondaryData) {\n      return this.secondaryData.moduleId;\n    } else {\n      return this.packageJson['name'];\n    }\n  }\n\n  /**\n   * The UMD module ID registers a module on the old-fashioned JavaScript global scope.\n   * Used by UMD bundles only.\n   * Example: `@my/foo/bar` registers as `global['my']['foo']['bar']`.\n   */\n  public get umdId(): string {\n    return this.$get('lib.umdId') || this.flattenModuleId();\n  }\n\n  /**\n   * The AMD ID reflects a named module that is distributed in the UMD bundles.\n   * @link http://requirejs.org/docs/whyamd.html#namedmodules\n   */\n  public get amdId(): string {\n    return this.$get('lib.amdId') || this.moduleId;\n  }\n\n  private flattenModuleId(separator: string = '.') {\n    if (this.moduleId.startsWith('@')) {\n      return this.moduleId\n        .substring(1)\n        .split('/')\n        .join(separator);\n    } else {\n      return this.moduleId.split('/').join(separator);\n    }\n  }\n}\n"]}