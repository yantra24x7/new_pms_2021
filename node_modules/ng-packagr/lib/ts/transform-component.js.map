{"version":3,"file":"transform-component.js","sourceRoot":"","sources":["../../../src/lib/ts/transform-component.ts"],"names":[],"mappings":";;AAAA,iCAAiC;AACjC,2CAA+E;AAgBlE,QAAA,kBAAkB,GAEa,WAAW,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,EAAE;IACjF,uEAAuE;IACvE,EAAE,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;QACjD,MAAM,CAAC,UAAU,CAAC;IACpB,CAAC;IAED,MAAM,sBAAsB,GAAe,CAAC,IAAkB,EAAE,EAAE;QAChE,EAAE,CAAC,CAAC,yBAAa,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACxB,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QACvC,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,uBAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC7B,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QACrC,CAAC;QAED,MAAM,CAAC,EAAE,CAAC,cAAc,CAAC,IAAI,EAAE,sBAAsB,EAAE,OAAO,CAAC,CAAC;IAClE,CAAC,CAAC;IAEF,MAAM,eAAe,GAAG,CAAC,IAAa,EAAW,EAAE,CACjD,gCAAoB,CAAC,IAAI,CAAC;QACxB,CAAC,CAAC,EAAE,CAAC,cAAc,CAAC,IAAI,EAAE,sBAAsB,EAAE,OAAO,CAAC;QAC1D,CAAC,CAAC,EAAE,CAAC,cAAc,CAAC,IAAI,EAAE,eAAe,EAAE,OAAO,CAAC,CAAC;IAExD,uDAAuD;IACvD,MAAM,aAAa,GAAkC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC;IAExG,MAAM,CAAC,aAAa,CAAC,EAAE,CAAC,SAAS,CAAC,UAAU,EAAE,eAAe,CAAC,CAAC,CAAC;AAClE,CAAC,CAAC","sourcesContent":["import * as ts from 'typescript';\nimport { isComponentDecorator, isTemplateUrl, isStyleUrls } from './ng-ts-ast';\n\n/**\n * A transformer that updates the metadata for Angular `@Component({})` decorators.\n */\nexport type ComponentTransformer = {\n  /** TypeScript transformer to update the property assignment for `templateUrl: '..'`. */\n  templateUrl: ts.Transformer<ts.PropertyAssignment>;\n\n  /** TypeScript transformer to update the property assignment for `styleUrls: []`. */\n  styleUrls: ts.Transformer<ts.PropertyAssignment>;\n\n  /** TypeScript transformer to update the source file. */\n  file?: ts.Transformer<ts.SourceFile>;\n};\n\nexport const transformComponent: (\n  transformer: ComponentTransformer\n) => ts.TransformerFactory<ts.SourceFile> = transformer => context => sourceFile => {\n  // skip source files from 'node_modules' directory (third-party source)\n  if (sourceFile.fileName.includes('node_modules')) {\n    return sourceFile;\n  }\n\n  const visitComponentMetadata: ts.Visitor = (node: ts.Decorator) => {\n    if (isTemplateUrl(node)) {\n      return transformer.templateUrl(node);\n    } else if (isStyleUrls(node)) {\n      return transformer.styleUrls(node);\n    }\n\n    return ts.visitEachChild(node, visitComponentMetadata, context);\n  };\n\n  const visitDecorators = (node: ts.Node): ts.Node =>\n    isComponentDecorator(node)\n      ? ts.visitEachChild(node, visitComponentMetadata, context)\n      : ts.visitEachChild(node, visitDecorators, context);\n\n  // Either custom file transformer or identity transform\n  const transformFile: ts.Transformer<ts.SourceFile> = transformer.file ? transformer.file : file => file;\n\n  return transformFile(ts.visitNode(sourceFile, visitDecorators));\n};\n"]}