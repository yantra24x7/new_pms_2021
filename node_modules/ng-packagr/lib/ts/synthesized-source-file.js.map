{"version":3,"file":"synthesized-source-file.js","sourceRoot":"","sources":["../../../src/lib/ts/synthesized-source-file.ts"],"names":[],"mappings":";;AAAA,iCAAiC;AAgBjC,iCAAwC,UAAyB;IAC/D,MAAM,CAAC,UAAU,IAAI,UAAU,CAAC,gBAAgB,CAAC,YAAY,KAAK,CAAC;AACrE,CAAC;AAFD,0DAEC;AAED;;;;;;GAMG;AACH,0CAAiD,IAAa,EAAE,WAAmB;IACjF,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,EAA2B,CAAC;IAEjE,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC,CAAC;QAC/B,UAAU,CAAC,cAAc,GAAG,EAAE,CAAC;IACjC,CAAC;IAED,UAAU,CAAC,cAAc,CAAC,IAAI,CAAC;QAC7B,IAAI,EAAE,IAAI,CAAC,QAAQ,EAAE;QACrB,EAAE,EAAE,IAAI,CAAC,MAAM,EAAE;QACjB,IAAI,EAAE,WAAW;KAClB,CAAC,CAAC;IAEH,MAAM,CAAC,UAAU,CAAC;AACpB,CAAC;AAdD,4EAcC;AAED;;;;GAIG;AACH,yBAAgC,UAAiD;IAC/E,MAAM,cAAc,GAAG,UAAU,CAAC,WAAW,EAAE,CAAC;IAEhD,EAAE,CAAC,CAAC,uBAAuB,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;QACxC,IAAI,SAAS,GAAG,EAAE,CAAC;QACnB,IAAI,QAAQ,GAAG,CAAC,CAAC;QACjB,GAAG,CAAC,CAAC,IAAI,WAAW,IAAI,UAAU,CAAC,cAAc,CAAC,CAAC,CAAC;YAClD,SAAS,GAAG,SAAS,CAAC,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,QAAQ,EAAE,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YAC5G,QAAQ,GAAG,WAAW,CAAC,EAAE,CAAC;QAC5B,CAAC;QACD,SAAS,GAAG,SAAS,CAAC,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC;QAEjE,MAAM,CAAC,SAAS,CAAC;IACnB,CAAC;IAAC,IAAI,CAAC,CAAC;QACN,MAAM,CAAC,cAAc,CAAC;IACxB,CAAC;AACH,CAAC;AAhBD,0CAgBC;AAED;;;;;GAKG;AACH,yBAAgC,UAAiD;IAC/E,EAAE,CAAC,CAAC,uBAAuB,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;QACxC,MAAM,UAAU,GAAG,eAAe,CAAC,UAAU,CAAC,CAAC;QAE/C,MAAM,CAAC,EAAE,CAAC,gBAAgB,CAAC,UAAU,CAAC,QAAQ,EAAE,UAAU,EAAE,UAAU,CAAC,eAAe,EAAE,IAAI,EAAE,EAAE,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;IAClH,CAAC;IAAC,IAAI,CAAC,CAAC;QACN,MAAM,CAAC,UAAU,CAAC;IACpB,CAAC;AACH,CAAC;AARD,0CAQC","sourcesContent":["import * as ts from 'typescript';\n\n/**\n * An extension to TypeScript source files that allows to replace text spands in the original\n * source text with synthesized source text.\n */\nexport interface SynthesizedSourceFile extends ts.SourceFile {\n  __replacements?: Replacement[];\n}\n\nexport interface Replacement {\n  from: number;\n  to: number;\n  text: string;\n}\n\nexport function isSynthesizedSourceFile(sourceFile: ts.SourceFile): sourceFile is SynthesizedSourceFile {\n  return sourceFile && sourceFile['__replacements'] instanceof Array;\n}\n\n/**\n * Adds a {@link Replacement} marker to the TypeScript source file of `node`. The source text of\n * `node` should be replaced by the `replacement` source text in subsequent processing.\n *\n * @param node The source node that should be replaced\n * @param replacement The synthesized source text that will replace the node.\n */\nexport function replaceWithSynthesizedSourceText(node: ts.Node, replacement: string): SynthesizedSourceFile {\n  const sourceFile = node.getSourceFile() as SynthesizedSourceFile;\n\n  if (!sourceFile.__replacements) {\n    sourceFile.__replacements = [];\n  }\n\n  sourceFile.__replacements.push({\n    from: node.getStart(),\n    to: node.getEnd(),\n    text: replacement\n  });\n\n  return sourceFile;\n}\n\n/**\n * Writes TypeScript source text to a string, potentially applying replacements.\n *\n * @param sourceFile TypeScript source file, either original or synthesiized sources\n */\nexport function writeSourceText(sourceFile: ts.SourceFile | SynthesizedSourceFile): string {\n  const originalSource = sourceFile.getFullText();\n\n  if (isSynthesizedSourceFile(sourceFile)) {\n    let newSource = '';\n    let position = 0;\n    for (let replacement of sourceFile.__replacements) {\n      newSource = newSource.concat(originalSource.substring(position, replacement.from)).concat(replacement.text);\n      position = replacement.to;\n    }\n    newSource = newSource.concat(originalSource.substring(position));\n\n    return newSource;\n  } else {\n    return originalSource;\n  }\n}\n\n/**\n * Writes a TypeScript source file, potentially applying replacements, and returns a 'fresh' source\n * file instance that may be used for later processing.\n *\n * @param sourceFile TypeScript source file, either original or synthesized sources\n */\nexport function writeSourceFile(sourceFile: ts.SourceFile | SynthesizedSourceFile): ts.SourceFile {\n  if (isSynthesizedSourceFile(sourceFile)) {\n    const sourceText = writeSourceText(sourceFile);\n\n    return ts.createSourceFile(sourceFile.fileName, sourceText, sourceFile.languageVersion, true, ts.ScriptKind.TS);\n  } else {\n    return sourceFile;\n  }\n}\n"]}