{"version":3,"file":"redirect-write-file-compiler-host.js","sourceRoot":"","sources":["../../../src/lib/ts/redirect-write-file-compiler-host.ts"],"names":[],"mappings":";;AAAA,+BAA+B;AAE/B,6BAA6B;AAE7B;;;;;;GAMG;AACH,uCACE,YAA6B,EAC7B,OAAe,EACf,cAAsB;IAEtB,MAAM,mBACD,YAAY,IACf,SAAS,EAAE,CACT,QAAgB,EAChB,IAAY,EACZ,kBAA2B,EAC3B,OAAmC,EACnC,WAA0C,EAC1C,EAAE;YACF,IAAI,QAAQ,GAAG,QAAQ,CAAC;YACxB,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gBAC/B,MAAM,mBAAmB,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;gBAC7D,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,mBAAmB,CAAC,CAAC;YAC/D,CAAC;YACD,EAAE,CAAC,cAAc,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;QACpC,CAAC,IACD;AACJ,CAAC;AAtBD,sEAsBC","sourcesContent":["import * as fs from 'fs-extra';\nimport * as ts from 'typescript';\nimport * as path from 'path';\n\n/**\n * Returns a TypeScript compiler host that redirects `writeFile` output to the given `declarationDir`.\n *\n * @param compilerHost Original compiler host\n * @param baseDir Project base directory\n * @param declarationDir Declarations target directory\n */\nexport function redirectWriteFileCompilerHost(\n  compilerHost: ts.CompilerHost,\n  baseDir: string,\n  declarationDir: string\n): ts.CompilerHost {\n  return {\n    ...compilerHost,\n    writeFile: (\n      fileName: string,\n      data: string,\n      writeByteOrderMark: boolean,\n      onError?: (message: string) => void,\n      sourceFiles?: ReadonlyArray<ts.SourceFile>\n    ) => {\n      let filePath = fileName;\n      if (fileName.endsWith('.d.ts')) {\n        const projectRelativePath = path.relative(baseDir, fileName);\n        filePath = path.resolve(declarationDir, projectRelativePath);\n      }\n      fs.outputFileSync(filePath, data);\n    }\n  };\n}\n"]}