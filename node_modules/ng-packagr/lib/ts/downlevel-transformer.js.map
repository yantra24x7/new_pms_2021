{"version":3,"file":"downlevel-transformer.js","sourceRoot":"","sources":["../../../src/lib/ts/downlevel-transformer.ts"],"names":[],"mappings":";;AAAA,2CAQoB;AAEpB,6BAA6B;AAE7B,mCAAmC;AAEnC;;GAEG;AACH,MAAM,gBAAgB,GAAoB;IACxC,MAAM,EAAE,yBAAY,CAAC,GAAG;IACxB,MAAM,EAAE,uBAAU,CAAC,MAAM;IACzB,OAAO,EAAE,IAAI;IACb,SAAS,EAAE,IAAI;IACf,aAAa,EAAE,IAAI;IACnB,kBAAkB,EAAE,IAAI;CACzB,CAAC;AAEF;;;GAGG;AACH,8BAAqC,UAAkB,EAAE,MAAc;IACrE,GAAG,CAAC,KAAK,CAAC,iBAAiB,UAAU,EAAE,CAAC,CAAC;IAEzC,MAAM,eAAe,qBAChB,gBAAgB,IACnB,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,EACjC,MAAM,GACP,CAAC;IAEF,MAAM,YAAY,GAAG,+BAAkB,CAAC,eAAe,CAAC,CAAC;IACzD,MAAM,OAAO,GAAG,0BAAa,CAAC,CAAC,UAAU,CAAC,EAAE,eAAe,EAAE,YAAY,CAAC,CAAC;IAC3E,MAAM,UAAU,GAAG,OAAO,CAAC,IAAI,EAAE,CAAC;IAElC,MAAM,CAAC,UAAU,CAAC,WAAW;QAC3B,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,8BAAiB,CAAC,UAAU,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC,CAAC;QACpF,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;AACxB,CAAC;AAhBD,oDAgBC;AAED;;;;GAIG;AACH,8BAAqC,IAAY,EAAE,QAAgB;IACjE,GAAG,CAAC,KAAK,CAAC,OAAO,QAAQ,EAAE,CAAC,CAAC;IAE7B,MAAM,eAAe,qBAChB,gBAAgB,IACnB,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,GAChC,CAAC;IAEF,MAAM,EAAE,UAAU,EAAE,aAAa,EAAE,GAAG,4BAAe,CAAC,IAAI,EAAE;QAC1D,eAAe;KAChB,CAAC,CAAC;IAEH,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC;QACrB,IAAI,EAAE,UAAU;QAChB,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC;KAC/B,CAAC,CAAC;AACL,CAAC;AAhBD,oDAgBC","sourcesContent":["import {\n  ModuleKind,\n  ScriptTarget,\n  createCompilerHost,\n  CompilerOptions,\n  createProgram,\n  formatDiagnostics,\n  transpileModule\n} from 'typescript';\nimport { RawSourceMap } from 'source-map';\nimport * as path from 'path';\n\nimport * as log from '../util/log';\n\n/**\n * Base `tsc` `CompilerOptions` shared among various downleveling methods.\n */\nconst COMPILER_OPTIONS: CompilerOptions = {\n  target: ScriptTarget.ES5,\n  module: ModuleKind.ES2015,\n  allowJs: true,\n  sourceMap: true,\n  importHelpers: true,\n  downlevelIteration: true\n};\n\n/**\n * Downlevels a .js file from `ES2015` to `ES5`. Internally, uses `tsc`.\n *\n */\nexport function downlevelEmitWithTsc(entryPoint: string, outDir: string): Promise<void> {\n  log.debug(`tsc downlevel ${entryPoint}`);\n\n  const compilerOptions: CompilerOptions = {\n    ...COMPILER_OPTIONS,\n    mapRoot: path.dirname(entryPoint),\n    outDir\n  };\n\n  const compilerHost = createCompilerHost(compilerOptions);\n  const program = createProgram([entryPoint], compilerOptions, compilerHost);\n  const emitResult = program.emit();\n\n  return emitResult.emitSkipped\n    ? Promise.reject(new Error(formatDiagnostics(emitResult.diagnostics, compilerHost)))\n    : Promise.resolve();\n}\n\n/**\n * Downlevels a .js file from `ES2015` to `ES5`. Internally, uses `tsc`.\n *\n * Required for some external as they contains `ES2015` syntax such as `const` and `let`\n */\nexport function downlevelCodeWithTsc(code: string, filePath: string): Promise<{ code: string; map: RawSourceMap }> {\n  log.debug(`tsc ${filePath}`);\n\n  const compilerOptions: CompilerOptions = {\n    ...COMPILER_OPTIONS,\n    mapRoot: path.dirname(filePath)\n  };\n\n  const { outputText, sourceMapText } = transpileModule(code, {\n    compilerOptions\n  });\n\n  return Promise.resolve({\n    code: outputText,\n    map: JSON.parse(sourceMapText)\n  });\n}\n"]}