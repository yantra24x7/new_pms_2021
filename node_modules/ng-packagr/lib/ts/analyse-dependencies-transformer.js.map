{"version":3,"file":"analyse-dependencies-transformer.js","sourceRoot":"","sources":["../../../src/lib/ts/analyse-dependencies-transformer.ts"],"names":[],"mappings":";;AAAA,iCAAiC;AAMpB,QAAA,mBAAmB,GAAG,CAAC,QAA4B,EAAE,EAAE,CAAC,CAAC,OAAiC,EAAE,EAAE,CAAC,CAC1G,UAAyB,EACV,EAAE;IACjB,uEAAuE;IACvE,oDAAoD;IACpD,EAAE,CAAC,CAAC,oCAAoC,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QACnE,MAAM,CAAC,UAAU,CAAC;IACpB,CAAC;IAED,MAAM,sBAAsB,GAAG,CAAC,IAA0B,EAAE,EAAE;QAC5D,MAAM,IAAI,GAAG,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,CAAC;QAE5C,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IAC5C,CAAC,CAAC;IAEF,MAAM,YAAY,GAAe,IAAI,CAAC,EAAE;QACtC,EAAE,CAAC,CAAC,EAAE,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACjC,oCAAoC;YACpC,MAAM,gBAAgB,GAAW,sBAAsB,CAAC,IAAI,CAAC,CAAC;YAC9D,QAAQ,CAAC,IAAI,CAAC,aAAa,EAAE,EAAE,gBAAgB,CAAC,CAAC;QACnD,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,CAAC,EAAE,CAAC,cAAc,CAAC,IAAI,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;QACxD,CAAC;QAED,MAAM,CAAC,IAAI,CAAC;IACd,CAAC,CAAC;IAEF,MAAM,CAAC,EAAE,CAAC,cAAc,CAAC,UAAU,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;AAC9D,CAAC,CAAC","sourcesContent":["import * as ts from 'typescript';\n\nexport interface DependencyAnalyser {\n  (sourceFile: ts.SourceFile, moduleId: string): void;\n}\n\nexport const analyseDependencies = (analyser: DependencyAnalyser) => (context: ts.TransformationContext) => (\n  sourceFile: ts.SourceFile\n): ts.SourceFile => {\n  // skip source files from 'node_modules' directory (third-party source)\n  // 'ngfactory' and 'ngstyles' should also be skipped\n  if (/node_modules|\\.ngfactory|\\.ngstyle/.test(sourceFile.fileName)) {\n    return sourceFile;\n  }\n\n  const findModuleIdFromImport = (node: ts.ImportDeclaration) => {\n    const text = node.moduleSpecifier.getText();\n\n    return text.substring(1, text.length - 1);\n  };\n\n  const visitImports: ts.Visitor = node => {\n    if (ts.isImportDeclaration(node)) {\n      // Found an 'import ...' declaration\n      const importedModuleId: string = findModuleIdFromImport(node);\n      analyser(node.getSourceFile(), importedModuleId);\n    } else {\n      return ts.visitEachChild(node, visitImports, context);\n    }\n\n    return node;\n  };\n\n  return ts.visitEachChild(sourceFile, visitImports, context);\n};\n"]}