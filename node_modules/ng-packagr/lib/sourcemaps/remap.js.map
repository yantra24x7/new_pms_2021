{"version":3,"file":"remap.js","sourceRoot":"","sources":["../../../src/lib/sourcemaps/remap.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,mCAAmC;AACnC,mCAAmC;AACnC,uCAAyC;AAEzC;;;;;GAKG;AACH,wBAAqC,WAA8B;;QACjE,yBAAyB;QACzB,MAAM,SAAS,GAAG,MAAM,gBAAS,CAAC,WAAW,CAAC,CAAC;QAE/C,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,GAAG,CAC9B,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE;YACzB,GAAG,CAAC,KAAK,CAAC,0BAA0B,UAAU,EAAE,CAAC,CAAC;YAClD,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAClC,CAAC,CAAC,CACH,CAAC;QAEF,6BAA6B;QAC7B,MAAM,IAAI,GAAG;YACX,MAAM,EAAE,KAAK;YACb,cAAc,EAAE,IAAI;SACrB,CAAC;QAEF,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACrD,CAAC;CAAA;AAlBD,wCAkBC","sourcesContent":["import * as sorcery from 'sorcery';\nimport * as log from '../util/log';\nimport { globFiles } from '../util/glob';\n\n/**\n * Re-maps the source `.map` file for the given `sourceFile` or `Glob Pattern`. This keeps source maps intact over\n * a series of transpilations!\n *\n * @param globPattern Source file or Glob pattern\n */\nexport async function remapSourceMap(globPattern: string | string[]): Promise<any> {\n  // read and create chains\n  const filesPath = await globFiles(globPattern);\n\n  const chains = await Promise.all(\n    filesPath.map(sourceFile => {\n      log.debug(`re-mapping sources for ${sourceFile}`);\n      return sorcery.load(sourceFile);\n    })\n  );\n\n  // write re-mapped sourcemaps\n  const opts = {\n    inline: false,\n    includeContent: true\n  };\n\n  return Promise.all(chains.map(x => x.write(opts)));\n}\n"]}