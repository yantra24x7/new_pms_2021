{"version":3,"file":"ngx-text-diff.js.map","sources":["ng://ngx-text-diff/lib/ngx-text-diff.utils.ts","ng://ngx-text-diff/lib/ngx-text-diff.service.ts","ng://ngx-text-diff/lib/ngx-text-diff.component.ts","ng://ngx-text-diff/lib/loader-spinner/loader-spinner.component.ts","ng://ngx-text-diff/lib/format-line.pipe.ts","ng://ngx-text-diff/lib/ngx-text-diff.module.ts"],"sourcesContent":["export const isNil = val => val === undefined || val === null;\r\nexport const isEmpty = val => val == null || !(Object.keys(val) || val).length || (Object.keys(val) || val).length === 0;\r\n","import { Injectable } from '@angular/core';\r\nimport { Diff, DIFF_DELETE, DIFF_EQUAL, DIFF_INSERT, diff_match_patch } from 'diff-match-patch';\r\nimport { DiffLineResult, DiffPart, DiffTableRowResult } from './ngx-text-diff.model';\r\nimport { isEmpty, isNil } from './ngx-text-diff.utils';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NgxTextDiffService {\r\n  diffParser: diff_match_patch;\r\n\r\n  constructor() {\r\n    this.initParser();\r\n  }\r\n\r\n  private initParser() {\r\n    this.diffParser = new diff_match_patch();\r\n  }\r\n\r\n  getDiffsByLines(left: string, right: string): Promise<DiffTableRowResult[]> {\r\n    return new Promise<DiffTableRowResult[]>((resolve, reject) => {\r\n      const a = this.diffParser.diff_linesToChars_(left, right);\r\n      const lineText1 = a.chars1;\r\n      const lineText2 = a.chars2;\r\n      const linesArray = a.lineArray;\r\n      const diffs: Diff[] = this.diffParser.diff_main(lineText1, lineText2, true);\r\n      this.diffParser.diff_charsToLines_(diffs, linesArray);\r\n      const rows: DiffTableRowResult[] = this.formatOutput(diffs);\r\n      if (!rows) {\r\n        reject('Error');\r\n      }\r\n\r\n      resolve(rows);\r\n    });\r\n  }\r\n\r\n  private formatOutput(diffs: Diff[]): DiffTableRowResult[] {\r\n    let lineLeft = 1;\r\n    let lineRight = 1;\r\n    return diffs.reduce((rows: DiffTableRowResult[], diff: Diff) => {\r\n      if (!rows) {\r\n        rows = [];\r\n      }\r\n      const diffType: number = diff[0];\r\n      const diffValue: string = diff[1];\r\n      let leftDiffRow: DiffTableRowResult = null;\r\n      let rightDiffRow: DiffTableRowResult = null;\r\n      let leftContent: DiffLineResult = null;\r\n      let rightContent: DiffLineResult = null;\r\n      let rowTemp: DiffTableRowResult = null;\r\n      switch (diffType) {\r\n        case DIFF_EQUAL: // 0\r\n          diffValue\r\n            .split('\\n')\r\n            .filter((value, index, array) => {\r\n              if (index === array.length - 1) {\r\n                return !isEmpty(value);\r\n              }\r\n              return true;\r\n            })\r\n            .forEach(line => {\r\n              leftContent = {\r\n                lineNumber: lineLeft,\r\n                lineContent: line,\r\n                lineDiffs: [],\r\n                prefix: ''\r\n              };\r\n              rightContent = {\r\n                lineNumber: lineRight,\r\n                lineContent: line,\r\n                lineDiffs: [],\r\n                prefix: ''\r\n              };\r\n              rowTemp = {\r\n                leftContent,\r\n                rightContent,\r\n                belongTo: 'both',\r\n                hasDiffs: false,\r\n                numDiffs: 0,\r\n              };\r\n              rows.push(rowTemp);\r\n              lineRight = lineRight + 1;\r\n              lineLeft = lineLeft + 1;\r\n            });\r\n          break;\r\n        case DIFF_DELETE: // -1\r\n          diffValue\r\n            .split('\\n')\r\n            .filter((value, index, array) => {\r\n              if (index === array.length - 1) {\r\n                return !isEmpty(value);\r\n              }\r\n              return true;\r\n            })\r\n            .forEach(line => {\r\n              rightDiffRow = rows.find(\r\n                row => !row.leftContent && row.rightContent && row.rightContent.lineNumber === lineLeft && row.rightContent.prefix !== ''\r\n              );\r\n              leftContent = {\r\n                lineNumber: lineLeft,\r\n                lineContent: line,\r\n                lineDiffs: [{ content: line, isDiff: true }],\r\n                prefix: '-'\r\n              };\r\n              if (rightDiffRow) {\r\n                rightDiffRow.leftContent = leftContent;\r\n                rightDiffRow.leftContent.lineDiffs = this.getDiffParts(\r\n                  rightDiffRow.leftContent.lineContent,\r\n                  rightDiffRow.rightContent.lineContent\r\n                );\r\n                rightDiffRow.rightContent.lineDiffs = this.getDiffParts(\r\n                  rightDiffRow.rightContent.lineContent,\r\n                  rightDiffRow.leftContent.lineContent\r\n                );\r\n                rightDiffRow.belongTo = 'both';\r\n                rightDiffRow.numDiffs = this.countDiffs(rightDiffRow);\r\n              } else {\r\n                rows.push({\r\n                  leftContent,\r\n                  rightContent: null,\r\n                  hasDiffs: true,\r\n                  belongTo: 'left',\r\n                  numDiffs: 1,\r\n                });\r\n              }\r\n              lineLeft = lineLeft + 1;\r\n            });\r\n          break;\r\n        case DIFF_INSERT: // 1\r\n          diffValue\r\n            .split('\\n')\r\n            .filter((value, index, array) => {\r\n              if (index === array.length - 1) {\r\n                return !isEmpty(value);\r\n              }\r\n              return true;\r\n            })\r\n            .forEach(line => {\r\n              leftDiffRow = rows.find(\r\n                row => row.leftContent && !row.rightContent && row.leftContent.lineNumber === lineRight && row.leftContent.prefix !== ''\r\n              );\r\n              rightContent = {\r\n                lineNumber: lineRight,\r\n                lineContent: line,\r\n                lineDiffs: [{ content: line, isDiff: true }],\r\n                prefix: '+'\r\n              };\r\n              if (leftDiffRow) {\r\n                leftDiffRow.rightContent = rightContent;\r\n                leftDiffRow.leftContent.lineDiffs = this.getDiffParts(\r\n                  leftDiffRow.leftContent.lineContent,\r\n                  leftDiffRow.rightContent.lineContent\r\n                );\r\n                leftDiffRow.rightContent.lineDiffs = this.getDiffParts(\r\n                  leftDiffRow.rightContent.lineContent,\r\n                  leftDiffRow.leftContent.lineContent\r\n                );\r\n                leftDiffRow.belongTo = 'both';\r\n                leftDiffRow.numDiffs = this.countDiffs(leftDiffRow);\r\n              } else {\r\n                rows.push({\r\n                  leftContent: null,\r\n                  rightContent,\r\n                  hasDiffs: true,\r\n                  belongTo: 'right',\r\n                  numDiffs: 1,\r\n                });\r\n              }\r\n              lineRight = lineRight + 1;\r\n            });\r\n          break;\r\n      }\r\n      return rows;\r\n    }, []);\r\n  }\r\n\r\n  private countDiffs(result: DiffTableRowResult): number {\r\n    let diffCount = 0;\r\n    if (result.leftContent) {\r\n      diffCount += result.leftContent.lineDiffs.filter(diff => diff.isDiff).length;\r\n    }\r\n    if (result.leftContent) {\r\n      diffCount += result.rightContent.lineDiffs.filter(diff => diff.isDiff).length;\r\n    }\r\n    return diffCount;\r\n  }\r\n\r\n  private getDiffParts(value: string, compareValue: string): DiffPart[] {\r\n    const diffParts: DiffPart[] = [];\r\n    let i = 0;\r\n    let j = 0;\r\n    let shared = '';\r\n    let diff = '';\r\n\r\n    while (i < value.length) {\r\n      if (value[i] === compareValue[j] && j < compareValue.length) {\r\n        if (diff !== '') {\r\n          diffParts.push({ content: diff, isDiff: true });\r\n          diff = '';\r\n        }\r\n        shared += value[i];\r\n      } else {\r\n        if (shared !== '') {\r\n          diffParts.push({ content: shared, isDiff: false });\r\n          shared = '';\r\n        }\r\n        diff += value[i];\r\n      }\r\n      i++;\r\n      j++;\r\n    }\r\n\r\n    if (diff !== '') {\r\n      diffParts.push({ content: diff, isDiff: true });\r\n    } else if (shared !== '') {\r\n      diffParts.push({ content: shared, isDiff: false });\r\n    }\r\n\r\n    return diffParts;\r\n  }\r\n}\r\n","import { ChangeDetectorRef, Component, Input, OnDestroy, OnInit, Output, EventEmitter } from '@angular/core';\r\nimport { DiffContent, DiffPart, DiffTableFormat, DiffTableFormatOption, DiffTableRowResult, DiffResults } from './ngx-text-diff.model';\r\nimport { NgxTextDiffService } from './ngx-text-diff.service';\r\nimport { Observable, Subscription } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'td-ngx-text-diff',\r\n  templateUrl: './ngx-text-diff.component.html',\r\n  styleUrls: ['./ngx-text-diff.component.css'],\r\n})\r\nexport class NgxTextDiffComponent implements OnInit, OnDestroy {\r\n  private _hideMatchingLines = false;\r\n\r\n  @Input() format: DiffTableFormat = 'SideBySide';\r\n  @Input() left = '';\r\n  @Input() right = '';\r\n  @Input() diffContent: Observable<DiffContent>;\r\n  @Input() loading = false;\r\n  @Input() showToolbar = true;\r\n  @Input() showBtnToolbar = true;\r\n  @Input()\r\n  get hideMatchingLines() {\r\n    return this._hideMatchingLines;\r\n  }\r\n\r\n  set hideMatchingLines(hide: boolean) {\r\n    this.hideMatchingLinesChanged(hide);\r\n  }\r\n  @Input() outerContainerClass: string;\r\n  @Input() outerContainerStyle: any;\r\n  @Input() toolbarClass: string;\r\n  @Input() toolbarStyle: any;\r\n  @Input() compareRowsClass: string;\r\n  @Input() compareRowsStyle: any;\r\n  @Output() compareResults = new EventEmitter<DiffResults>();\r\n  subscriptions: Subscription[] = [];\r\n  tableRows: DiffTableRowResult[] = [];\r\n  filteredTableRows: DiffTableRowResult[] = [];\r\n  tableRowsLineByLine: DiffTableRowResult[] = [];\r\n  filteredTableRowsLineByLine: DiffTableRowResult[] = [];\r\n  diffsCount = 0;\r\n\r\n  formatOptions: DiffTableFormatOption[] = [\r\n    {\r\n      id: 'side-by-side',\r\n      name: 'side-by-side',\r\n      label: 'Side by Side',\r\n      value: 'SideBySide',\r\n      icon: 'la-code',\r\n    },\r\n    {\r\n      id: 'line-by-line',\r\n      name: 'line-by-line',\r\n      label: 'Line by Line',\r\n      value: 'LineByLine',\r\n      icon: 'la-file-text',\r\n    },\r\n  ];\r\n\r\n  constructor(private diff: NgxTextDiffService, private cd: ChangeDetectorRef) {}\r\n\r\n  ngOnInit() {\r\n    this.loading = true;\r\n    if (this.diffContent) {\r\n      this.subscriptions.push(\r\n        this.diffContent.subscribe(content => {\r\n          this.loading = true;\r\n          this.left = content.leftContent;\r\n          this.right = content.rightContent;\r\n          this.renderDiffs()\r\n            .then(() => {\r\n              this.cd.detectChanges();\r\n              this.loading = false;\r\n            })\r\n            .catch(() => (this.loading = false));\r\n        })\r\n      );\r\n    }\r\n    this.renderDiffs()\r\n      .then(() => (this.loading = false))\r\n      .catch(e => (this.loading = false));\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.subscriptions) {\r\n      this.subscriptions.forEach(subscription => subscription.unsubscribe());\r\n    }\r\n  }\r\n\r\n  hideMatchingLinesChanged(value: boolean) {\r\n    this._hideMatchingLines = value;\r\n    if (this.hideMatchingLines) {\r\n      this.filteredTableRows = this.tableRows.filter(\r\n        row => (row.leftContent && row.leftContent.prefix === '-') || (row.rightContent && row.rightContent.prefix === '+')\r\n      );\r\n      this.filteredTableRowsLineByLine = this.tableRowsLineByLine.filter(\r\n        row => (row.leftContent && row.leftContent.prefix === '-') || (row.rightContent && row.rightContent.prefix === '+')\r\n      );\r\n    } else {\r\n      this.filteredTableRows = this.tableRows;\r\n      this.filteredTableRowsLineByLine = this.tableRowsLineByLine;\r\n    }\r\n  }\r\n\r\n  setDiffTableFormat(format: DiffTableFormat) {\r\n    this.format = format;\r\n  }\r\n\r\n  async renderDiffs() {\r\n    try {\r\n      this.diffsCount = 0;\r\n      this.tableRows = await this.diff.getDiffsByLines(this.left, this.right);\r\n      this.tableRowsLineByLine = this.tableRows.reduce((tableLineByLine: DiffTableRowResult[], row: DiffTableRowResult) => {\r\n        if (!tableLineByLine) {\r\n          tableLineByLine = [];\r\n        }\r\n        if (row.hasDiffs) {\r\n          if (row.leftContent) {\r\n            tableLineByLine.push({\r\n              leftContent: row.leftContent,\r\n              rightContent: null,\r\n              belongTo: row.belongTo,\r\n              hasDiffs: true,\r\n              numDiffs: row.numDiffs,\r\n            });\r\n          }\r\n          if (row.rightContent) {\r\n            tableLineByLine.push({\r\n              leftContent: null,\r\n              rightContent: row.rightContent,\r\n              belongTo: row.belongTo,\r\n              hasDiffs: true,\r\n              numDiffs: row.numDiffs,\r\n            });\r\n          }\r\n        } else {\r\n          tableLineByLine.push(row);\r\n        }\r\n\r\n        return tableLineByLine;\r\n      }, []);\r\n      this.diffsCount = this.tableRows.filter(row => row.hasDiffs).length;\r\n      this.filteredTableRows = this.tableRows;\r\n      this.filteredTableRowsLineByLine = this.tableRowsLineByLine;\r\n      this.emitCompareResultsEvent();\r\n    } catch (e) {\r\n      throw e;\r\n    }\r\n  }\r\n\r\n  emitCompareResultsEvent() {\r\n    const diffResults: DiffResults = {\r\n      hasDiff: this.diffsCount > 0,\r\n      diffsCount: this.diffsCount,\r\n      rowsWithDiff: this.tableRows\r\n        .filter(row => row.hasDiffs)\r\n        .map(row => ({\r\n          leftLineNumber: row.leftContent ? row.leftContent.lineNumber : null,\r\n          rightLineNumber: row.rightContent ? row.rightContent.lineNumber : null,\r\n          numDiffs: row.numDiffs,\r\n        })),\r\n    };\r\n\r\n    this.compareResults.next(diffResults);\r\n  }\r\n\r\n  trackTableRows(index, row: DiffTableRowResult) {\r\n    return row && row.leftContent ? row.leftContent.lineContent : row && row.rightContent ? row.rightContent.lineContent : undefined;\r\n  }\r\n\r\n  trackDiffs(index, diff: DiffPart) {\r\n    return diff && diff.content ? diff.content : undefined;\r\n  }\r\n}\r\n","import { Component, Input, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'td-loader-spinner',\r\n  templateUrl: './loader-spinner.component.html',\r\n  styleUrls: ['./loader-spinner.component.css']\r\n})\r\nexport class LoaderSpinnerComponent implements OnInit {\r\n  @Input() active = false;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'formatLine'\r\n})\r\nexport class FormatLinePipe implements PipeTransform {\r\n  transform(line: string, diffs?: string[]): string {\r\n    if (!line) {\r\n      return ' ';\r\n    }\r\n    if (!!diffs && diffs.length > 0) {\r\n      /*diffs.forEach(diff => {\r\n        line = line.replace(diff, `<span class=\"highli\">${diff}</span>`);\r\n      });*/\r\n    }\r\n    return line\r\n      .replace(/&/g, '&amp;')\r\n      .replace(/</g, '&lt;')\r\n      .replace(/>/g, '&gt;')\r\n      .replace(/\"/g, '&quot;')\r\n      .replace(/ /g, '&nbsp;');\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { NgxTextDiffComponent } from './ngx-text-diff.component';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { LoaderSpinnerComponent } from './loader-spinner/loader-spinner.component';\r\nimport { FormatLinePipe } from './format-line.pipe';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, FormsModule],\r\n  declarations: [NgxTextDiffComponent, LoaderSpinnerComponent, FormatLinePipe],\r\n  exports: [NgxTextDiffComponent]\r\n})\r\nexport class NgxTextDiffModule {}\r\n"],"names":[],"mappings":"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"}
