{"version":3,"sources":["ng://ngx-text-diff/lib/ngx-text-diff.utils.ts","ng://ngx-text-diff/lib/ngx-text-diff.service.ts","node_modules/tslib/tslib.es6.js","ng://ngx-text-diff/lib/ngx-text-diff.component.ts","ng://ngx-text-diff/lib/loader-spinner/loader-spinner.component.ts","ng://ngx-text-diff/lib/format-line.pipe.ts","ng://ngx-text-diff/lib/ngx-text-diff.module.ts"],"names":["isEmpty","val","Object","keys","length","NgxTextDiffService","this","initParser","prototype","diffParser","diff_match_patch","getDiffsByLines","left","right","_this","Promise","resolve","reject","a","diff_linesToChars_","lineText1","chars1","lineText2","chars2","linesArray","lineArray","diffs","diff_main","diff_charsToLines_","rows","formatOutput","lineLeft","lineRight","reduce","diff","diffType","diffValue","leftDiffRow","rightDiffRow","leftContent","rightContent","rowTemp","DIFF_EQUAL","split","filter","value","index","array","forEach","line","lineNumber","lineContent","lineDiffs","prefix","belongTo","hasDiffs","numDiffs","push","DIFF_DELETE","find","row","content","isDiff","getDiffParts","countDiffs","DIFF_INSERT","result","diffCount","compareValue","diffParts","i","j","shared","Injectable","args","providedIn","__generator","thisArg","body","f","y","t","g","_","label","sent","trys","ops","next","verb","throw","return","Symbol","iterator","n","v","step","op","TypeError","call","done","pop","e","NgxTextDiffComponent","cd","_hideMatchingLines","format","loading","showToolbar","showBtnToolbar","compareResults","EventEmitter","subscriptions","tableRows","filteredTableRows","tableRowsLineByLine","filteredTableRowsLineByLine","diffsCount","formatOptions","id","name","icon","defineProperty","hide","hideMatchingLinesChanged","ngOnInit","diffContent","subscribe","renderDiffs","then","detectChanges","catch","ngOnDestroy","subscription","unsubscribe","hideMatchingLines","setDiffTableFormat","__awaiter","_arguments","P","generator","fulfilled","rejected","apply","_a","_b","tableLineByLine","emitCompareResultsEvent","diffResults","hasDiff","rowsWithDiff","map","leftLineNumber","rightLineNumber","trackTableRows","undefined","trackDiffs","Component","selector","template","ChangeDetectorRef","Input","Output","LoaderSpinnerComponent","active","FormatLinePipe","transform","replace","Pipe","NgxTextDiffModule","NgModule","imports","CommonModule","FormsModule","declarations","exports"],"mappings":"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","sourcesContent":["export const isNil = val => val === undefined || val === null;\r\nexport const isEmpty = val => val == null || !(Object.keys(val) || val).length || (Object.keys(val) || val).length === 0;\r\n","import { Injectable } from '@angular/core';\r\nimport { Diff, DIFF_DELETE, DIFF_EQUAL, DIFF_INSERT, diff_match_patch } from 'diff-match-patch';\r\nimport { DiffLineResult, DiffPart, DiffTableRowResult } from './ngx-text-diff.model';\r\nimport { isEmpty, isNil } from './ngx-text-diff.utils';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NgxTextDiffService {\r\n  diffParser: diff_match_patch;\r\n\r\n  constructor() {\r\n    this.initParser();\r\n  }\r\n\r\n  private initParser() {\r\n    this.diffParser = new diff_match_patch();\r\n  }\r\n\r\n  getDiffsByLines(left: string, right: string): Promise<DiffTableRowResult[]> {\r\n    return new Promise<DiffTableRowResult[]>((resolve, reject) => {\r\n      const a = this.diffParser.diff_linesToChars_(left, right);\r\n      const lineText1 = a.chars1;\r\n      const lineText2 = a.chars2;\r\n      const linesArray = a.lineArray;\r\n      const diffs: Diff[] = this.diffParser.diff_main(lineText1, lineText2, true);\r\n      this.diffParser.diff_charsToLines_(diffs, linesArray);\r\n      const rows: DiffTableRowResult[] = this.formatOutput(diffs);\r\n      if (!rows) {\r\n        reject('Error');\r\n      }\r\n\r\n      resolve(rows);\r\n    });\r\n  }\r\n\r\n  private formatOutput(diffs: Diff[]): DiffTableRowResult[] {\r\n    let lineLeft = 1;\r\n    let lineRight = 1;\r\n    return diffs.reduce((rows: DiffTableRowResult[], diff: Diff) => {\r\n      if (!rows) {\r\n        rows = [];\r\n      }\r\n      const diffType: number = diff[0];\r\n      const diffValue: string = diff[1];\r\n      let leftDiffRow: DiffTableRowResult = null;\r\n      let rightDiffRow: DiffTableRowResult = null;\r\n      let leftContent: DiffLineResult = null;\r\n      let rightContent: DiffLineResult = null;\r\n      let rowTemp: DiffTableRowResult = null;\r\n      switch (diffType) {\r\n        case DIFF_EQUAL: // 0\r\n          diffValue\r\n            .split('\\n')\r\n            .filter((value, index, array) => {\r\n              if (index === array.length - 1) {\r\n                return !isEmpty(value);\r\n              }\r\n              return true;\r\n            })\r\n            .forEach(line => {\r\n              leftContent = {\r\n                lineNumber: lineLeft,\r\n                lineContent: line,\r\n                lineDiffs: [],\r\n                prefix: ''\r\n              };\r\n              rightContent = {\r\n                lineNumber: lineRight,\r\n                lineContent: line,\r\n                lineDiffs: [],\r\n                prefix: ''\r\n              };\r\n              rowTemp = {\r\n                leftContent,\r\n                rightContent,\r\n                belongTo: 'both',\r\n                hasDiffs: false,\r\n                numDiffs: 0,\r\n              };\r\n              rows.push(rowTemp);\r\n              lineRight = lineRight + 1;\r\n              lineLeft = lineLeft + 1;\r\n            });\r\n          break;\r\n        case DIFF_DELETE: // -1\r\n          diffValue\r\n            .split('\\n')\r\n            .filter((value, index, array) => {\r\n              if (index === array.length - 1) {\r\n                return !isEmpty(value);\r\n              }\r\n              return true;\r\n            })\r\n            .forEach(line => {\r\n              rightDiffRow = rows.find(\r\n                row => !row.leftContent && row.rightContent && row.rightContent.lineNumber === lineLeft && row.rightContent.prefix !== ''\r\n              );\r\n              leftContent = {\r\n                lineNumber: lineLeft,\r\n                lineContent: line,\r\n                lineDiffs: [{ content: line, isDiff: true }],\r\n                prefix: '-'\r\n              };\r\n              if (rightDiffRow) {\r\n                rightDiffRow.leftContent = leftContent;\r\n                rightDiffRow.leftContent.lineDiffs = this.getDiffParts(\r\n                  rightDiffRow.leftContent.lineContent,\r\n                  rightDiffRow.rightContent.lineContent\r\n                );\r\n                rightDiffRow.rightContent.lineDiffs = this.getDiffParts(\r\n                  rightDiffRow.rightContent.lineContent,\r\n                  rightDiffRow.leftContent.lineContent\r\n                );\r\n                rightDiffRow.belongTo = 'both';\r\n                rightDiffRow.numDiffs = this.countDiffs(rightDiffRow);\r\n              } else {\r\n                rows.push({\r\n                  leftContent,\r\n                  rightContent: null,\r\n                  hasDiffs: true,\r\n                  belongTo: 'left',\r\n                  numDiffs: 1,\r\n                });\r\n              }\r\n              lineLeft = lineLeft + 1;\r\n            });\r\n          break;\r\n        case DIFF_INSERT: // 1\r\n          diffValue\r\n            .split('\\n')\r\n            .filter((value, index, array) => {\r\n              if (index === array.length - 1) {\r\n                return !isEmpty(value);\r\n              }\r\n              return true;\r\n            })\r\n            .forEach(line => {\r\n              leftDiffRow = rows.find(\r\n                row => row.leftContent && !row.rightContent && row.leftContent.lineNumber === lineRight && row.leftContent.prefix !== ''\r\n              );\r\n              rightContent = {\r\n                lineNumber: lineRight,\r\n                lineContent: line,\r\n                lineDiffs: [{ content: line, isDiff: true }],\r\n                prefix: '+'\r\n              };\r\n              if (leftDiffRow) {\r\n                leftDiffRow.rightContent = rightContent;\r\n                leftDiffRow.leftContent.lineDiffs = this.getDiffParts(\r\n                  leftDiffRow.leftContent.lineContent,\r\n                  leftDiffRow.rightContent.lineContent\r\n                );\r\n                leftDiffRow.rightContent.lineDiffs = this.getDiffParts(\r\n                  leftDiffRow.rightContent.lineContent,\r\n                  leftDiffRow.leftContent.lineContent\r\n                );\r\n                leftDiffRow.belongTo = 'both';\r\n                leftDiffRow.numDiffs = this.countDiffs(leftDiffRow);\r\n              } else {\r\n                rows.push({\r\n                  leftContent: null,\r\n                  rightContent,\r\n                  hasDiffs: true,\r\n                  belongTo: 'right',\r\n                  numDiffs: 1,\r\n                });\r\n              }\r\n              lineRight = lineRight + 1;\r\n            });\r\n          break;\r\n      }\r\n      return rows;\r\n    }, []);\r\n  }\r\n\r\n  private countDiffs(result: DiffTableRowResult): number {\r\n    let diffCount = 0;\r\n    if (result.leftContent) {\r\n      diffCount += result.leftContent.lineDiffs.filter(diff => diff.isDiff).length;\r\n    }\r\n    if (result.leftContent) {\r\n      diffCount += result.rightContent.lineDiffs.filter(diff => diff.isDiff).length;\r\n    }\r\n    return diffCount;\r\n  }\r\n\r\n  private getDiffParts(value: string, compareValue: string): DiffPart[] {\r\n    const diffParts: DiffPart[] = [];\r\n    let i = 0;\r\n    let j = 0;\r\n    let shared = '';\r\n    let diff = '';\r\n\r\n    while (i < value.length) {\r\n      if (value[i] === compareValue[j] && j < compareValue.length) {\r\n        if (diff !== '') {\r\n          diffParts.push({ content: diff, isDiff: true });\r\n          diff = '';\r\n        }\r\n        shared += value[i];\r\n      } else {\r\n        if (shared !== '') {\r\n          diffParts.push({ content: shared, isDiff: false });\r\n          shared = '';\r\n        }\r\n        diff += value[i];\r\n      }\r\n      i++;\r\n      j++;\r\n    }\r\n\r\n    if (diff !== '') {\r\n      diffParts.push({ content: diff, isDiff: true });\r\n    } else if (shared !== '') {\r\n      diffParts.push({ content: shared, isDiff: false });\r\n    }\r\n\r\n    return diffParts;\r\n  }\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { ChangeDetectorRef, Component, Input, OnDestroy, OnInit, Output, EventEmitter } from '@angular/core';\r\nimport { DiffContent, DiffPart, DiffTableFormat, DiffTableFormatOption, DiffTableRowResult, DiffResults } from './ngx-text-diff.model';\r\nimport { NgxTextDiffService } from './ngx-text-diff.service';\r\nimport { Observable, Subscription } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'td-ngx-text-diff',\r\n  templateUrl: './ngx-text-diff.component.html',\r\n  styleUrls: ['./ngx-text-diff.component.css'],\r\n})\r\nexport class NgxTextDiffComponent implements OnInit, OnDestroy {\r\n  private _hideMatchingLines = false;\r\n\r\n  @Input() format: DiffTableFormat = 'SideBySide';\r\n  @Input() left = '';\r\n  @Input() right = '';\r\n  @Input() diffContent: Observable<DiffContent>;\r\n  @Input() loading = false;\r\n  @Input() showToolbar = true;\r\n  @Input() showBtnToolbar = true;\r\n  @Input()\r\n  get hideMatchingLines() {\r\n    return this._hideMatchingLines;\r\n  }\r\n\r\n  set hideMatchingLines(hide: boolean) {\r\n    this.hideMatchingLinesChanged(hide);\r\n  }\r\n  @Input() outerContainerClass: string;\r\n  @Input() outerContainerStyle: any;\r\n  @Input() toolbarClass: string;\r\n  @Input() toolbarStyle: any;\r\n  @Input() compareRowsClass: string;\r\n  @Input() compareRowsStyle: any;\r\n  @Output() compareResults = new EventEmitter<DiffResults>();\r\n  subscriptions: Subscription[] = [];\r\n  tableRows: DiffTableRowResult[] = [];\r\n  filteredTableRows: DiffTableRowResult[] = [];\r\n  tableRowsLineByLine: DiffTableRowResult[] = [];\r\n  filteredTableRowsLineByLine: DiffTableRowResult[] = [];\r\n  diffsCount = 0;\r\n\r\n  formatOptions: DiffTableFormatOption[] = [\r\n    {\r\n      id: 'side-by-side',\r\n      name: 'side-by-side',\r\n      label: 'Side by Side',\r\n      value: 'SideBySide',\r\n      icon: 'la-code',\r\n    },\r\n    {\r\n      id: 'line-by-line',\r\n      name: 'line-by-line',\r\n      label: 'Line by Line',\r\n      value: 'LineByLine',\r\n      icon: 'la-file-text',\r\n    },\r\n  ];\r\n\r\n  constructor(private diff: NgxTextDiffService, private cd: ChangeDetectorRef) {}\r\n\r\n  ngOnInit() {\r\n    this.loading = true;\r\n    if (this.diffContent) {\r\n      this.subscriptions.push(\r\n        this.diffContent.subscribe(content => {\r\n          this.loading = true;\r\n          this.left = content.leftContent;\r\n          this.right = content.rightContent;\r\n          this.renderDiffs()\r\n            .then(() => {\r\n              this.cd.detectChanges();\r\n              this.loading = false;\r\n            })\r\n            .catch(() => (this.loading = false));\r\n        })\r\n      );\r\n    }\r\n    this.renderDiffs()\r\n      .then(() => (this.loading = false))\r\n      .catch(e => (this.loading = false));\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.subscriptions) {\r\n      this.subscriptions.forEach(subscription => subscription.unsubscribe());\r\n    }\r\n  }\r\n\r\n  hideMatchingLinesChanged(value: boolean) {\r\n    this._hideMatchingLines = value;\r\n    if (this.hideMatchingLines) {\r\n      this.filteredTableRows = this.tableRows.filter(\r\n        row => (row.leftContent && row.leftContent.prefix === '-') || (row.rightContent && row.rightContent.prefix === '+')\r\n      );\r\n      this.filteredTableRowsLineByLine = this.tableRowsLineByLine.filter(\r\n        row => (row.leftContent && row.leftContent.prefix === '-') || (row.rightContent && row.rightContent.prefix === '+')\r\n      );\r\n    } else {\r\n      this.filteredTableRows = this.tableRows;\r\n      this.filteredTableRowsLineByLine = this.tableRowsLineByLine;\r\n    }\r\n  }\r\n\r\n  setDiffTableFormat(format: DiffTableFormat) {\r\n    this.format = format;\r\n  }\r\n\r\n  async renderDiffs() {\r\n    try {\r\n      this.diffsCount = 0;\r\n      this.tableRows = await this.diff.getDiffsByLines(this.left, this.right);\r\n      this.tableRowsLineByLine = this.tableRows.reduce((tableLineByLine: DiffTableRowResult[], row: DiffTableRowResult) => {\r\n        if (!tableLineByLine) {\r\n          tableLineByLine = [];\r\n        }\r\n        if (row.hasDiffs) {\r\n          if (row.leftContent) {\r\n            tableLineByLine.push({\r\n              leftContent: row.leftContent,\r\n              rightContent: null,\r\n              belongTo: row.belongTo,\r\n              hasDiffs: true,\r\n              numDiffs: row.numDiffs,\r\n            });\r\n          }\r\n          if (row.rightContent) {\r\n            tableLineByLine.push({\r\n              leftContent: null,\r\n              rightContent: row.rightContent,\r\n              belongTo: row.belongTo,\r\n              hasDiffs: true,\r\n              numDiffs: row.numDiffs,\r\n            });\r\n          }\r\n        } else {\r\n          tableLineByLine.push(row);\r\n        }\r\n\r\n        return tableLineByLine;\r\n      }, []);\r\n      this.diffsCount = this.tableRows.filter(row => row.hasDiffs).length;\r\n      this.filteredTableRows = this.tableRows;\r\n      this.filteredTableRowsLineByLine = this.tableRowsLineByLine;\r\n      this.emitCompareResultsEvent();\r\n    } catch (e) {\r\n      throw e;\r\n    }\r\n  }\r\n\r\n  emitCompareResultsEvent() {\r\n    const diffResults: DiffResults = {\r\n      hasDiff: this.diffsCount > 0,\r\n      diffsCount: this.diffsCount,\r\n      rowsWithDiff: this.tableRows\r\n        .filter(row => row.hasDiffs)\r\n        .map(row => ({\r\n          leftLineNumber: row.leftContent ? row.leftContent.lineNumber : null,\r\n          rightLineNumber: row.rightContent ? row.rightContent.lineNumber : null,\r\n          numDiffs: row.numDiffs,\r\n        })),\r\n    };\r\n\r\n    this.compareResults.next(diffResults);\r\n  }\r\n\r\n  trackTableRows(index, row: DiffTableRowResult) {\r\n    return row && row.leftContent ? row.leftContent.lineContent : row && row.rightContent ? row.rightContent.lineContent : undefined;\r\n  }\r\n\r\n  trackDiffs(index, diff: DiffPart) {\r\n    return diff && diff.content ? diff.content : undefined;\r\n  }\r\n}\r\n","import { Component, Input, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'td-loader-spinner',\r\n  templateUrl: './loader-spinner.component.html',\r\n  styleUrls: ['./loader-spinner.component.css']\r\n})\r\nexport class LoaderSpinnerComponent implements OnInit {\r\n  @Input() active = false;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'formatLine'\r\n})\r\nexport class FormatLinePipe implements PipeTransform {\r\n  transform(line: string, diffs?: string[]): string {\r\n    if (!line) {\r\n      return ' ';\r\n    }\r\n    if (!!diffs && diffs.length > 0) {\r\n      /*diffs.forEach(diff => {\r\n        line = line.replace(diff, `<span class=\"highli\">${diff}</span>`);\r\n      });*/\r\n    }\r\n    return line\r\n      .replace(/&/g, '&amp;')\r\n      .replace(/</g, '&lt;')\r\n      .replace(/>/g, '&gt;')\r\n      .replace(/\"/g, '&quot;')\r\n      .replace(/ /g, '&nbsp;');\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { NgxTextDiffComponent } from './ngx-text-diff.component';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { LoaderSpinnerComponent } from './loader-spinner/loader-spinner.component';\r\nimport { FormatLinePipe } from './format-line.pipe';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, FormsModule],\r\n  declarations: [NgxTextDiffComponent, LoaderSpinnerComponent, FormatLinePipe],\r\n  exports: [NgxTextDiffComponent]\r\n})\r\nexport class NgxTextDiffModule {}\r\n"]}