/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { DIFF_DELETE, DIFF_EQUAL, DIFF_INSERT, diff_match_patch } from 'diff-match-patch';
import { isEmpty } from './ngx-text-diff.utils';
import * as i0 from "@angular/core";
var NgxTextDiffService = /** @class */ (function () {
    function NgxTextDiffService() {
        this.initParser();
    }
    /**
     * @private
     * @return {?}
     */
    NgxTextDiffService.prototype.initParser = /**
     * @private
     * @return {?}
     */
    function () {
        this.diffParser = new diff_match_patch();
    };
    /**
     * @param {?} left
     * @param {?} right
     * @return {?}
     */
    NgxTextDiffService.prototype.getDiffsByLines = /**
     * @param {?} left
     * @param {?} right
     * @return {?}
     */
    function (left, right) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            /** @type {?} */
            var a = _this.diffParser.diff_linesToChars_(left, right);
            /** @type {?} */
            var lineText1 = a.chars1;
            /** @type {?} */
            var lineText2 = a.chars2;
            /** @type {?} */
            var linesArray = a.lineArray;
            /** @type {?} */
            var diffs = _this.diffParser.diff_main(lineText1, lineText2, true);
            _this.diffParser.diff_charsToLines_(diffs, linesArray);
            /** @type {?} */
            var rows = _this.formatOutput(diffs);
            if (!rows) {
                reject('Error');
            }
            resolve(rows);
        });
    };
    /**
     * @private
     * @param {?} diffs
     * @return {?}
     */
    NgxTextDiffService.prototype.formatOutput = /**
     * @private
     * @param {?} diffs
     * @return {?}
     */
    function (diffs) {
        var _this = this;
        /** @type {?} */
        var lineLeft = 1;
        /** @type {?} */
        var lineRight = 1;
        return diffs.reduce(function (rows, diff) {
            if (!rows) {
                rows = [];
            }
            /** @type {?} */
            var diffType = diff[0];
            /** @type {?} */
            var diffValue = diff[1];
            /** @type {?} */
            var leftDiffRow = null;
            /** @type {?} */
            var rightDiffRow = null;
            /** @type {?} */
            var leftContent = null;
            /** @type {?} */
            var rightContent = null;
            /** @type {?} */
            var rowTemp = null;
            switch (diffType) {
                case DIFF_EQUAL: // 0
                    diffValue
                        .split('\n')
                        .filter(function (value, index, array) {
                        if (index === array.length - 1) {
                            return !isEmpty(value);
                        }
                        return true;
                    })
                        .forEach(function (line) {
                        leftContent = {
                            lineNumber: lineLeft,
                            lineContent: line,
                            lineDiffs: [],
                            prefix: ''
                        };
                        rightContent = {
                            lineNumber: lineRight,
                            lineContent: line,
                            lineDiffs: [],
                            prefix: ''
                        };
                        rowTemp = {
                            leftContent: leftContent,
                            rightContent: rightContent,
                            belongTo: 'both',
                            hasDiffs: false,
                            numDiffs: 0,
                        };
                        rows.push(rowTemp);
                        lineRight = lineRight + 1;
                        lineLeft = lineLeft + 1;
                    });
                    break;
                case DIFF_DELETE: // -1
                    diffValue
                        .split('\n')
                        .filter(function (value, index, array) {
                        if (index === array.length - 1) {
                            return !isEmpty(value);
                        }
                        return true;
                    })
                        .forEach(function (line) {
                        rightDiffRow = rows.find(function (row) { return !row.leftContent && row.rightContent && row.rightContent.lineNumber === lineLeft && row.rightContent.prefix !== ''; });
                        leftContent = {
                            lineNumber: lineLeft,
                            lineContent: line,
                            lineDiffs: [{ content: line, isDiff: true }],
                            prefix: '-'
                        };
                        if (rightDiffRow) {
                            rightDiffRow.leftContent = leftContent;
                            rightDiffRow.leftContent.lineDiffs = _this.getDiffParts(rightDiffRow.leftContent.lineContent, rightDiffRow.rightContent.lineContent);
                            rightDiffRow.rightContent.lineDiffs = _this.getDiffParts(rightDiffRow.rightContent.lineContent, rightDiffRow.leftContent.lineContent);
                            rightDiffRow.belongTo = 'both';
                            rightDiffRow.numDiffs = _this.countDiffs(rightDiffRow);
                        }
                        else {
                            rows.push({
                                leftContent: leftContent,
                                rightContent: null,
                                hasDiffs: true,
                                belongTo: 'left',
                                numDiffs: 1,
                            });
                        }
                        lineLeft = lineLeft + 1;
                    });
                    break;
                case DIFF_INSERT: // 1
                    diffValue
                        .split('\n')
                        .filter(function (value, index, array) {
                        if (index === array.length - 1) {
                            return !isEmpty(value);
                        }
                        return true;
                    })
                        .forEach(function (line) {
                        leftDiffRow = rows.find(function (row) { return row.leftContent && !row.rightContent && row.leftContent.lineNumber === lineRight && row.leftContent.prefix !== ''; });
                        rightContent = {
                            lineNumber: lineRight,
                            lineContent: line,
                            lineDiffs: [{ content: line, isDiff: true }],
                            prefix: '+'
                        };
                        if (leftDiffRow) {
                            leftDiffRow.rightContent = rightContent;
                            leftDiffRow.leftContent.lineDiffs = _this.getDiffParts(leftDiffRow.leftContent.lineContent, leftDiffRow.rightContent.lineContent);
                            leftDiffRow.rightContent.lineDiffs = _this.getDiffParts(leftDiffRow.rightContent.lineContent, leftDiffRow.leftContent.lineContent);
                            leftDiffRow.belongTo = 'both';
                            leftDiffRow.numDiffs = _this.countDiffs(leftDiffRow);
                        }
                        else {
                            rows.push({
                                leftContent: null,
                                rightContent: rightContent,
                                hasDiffs: true,
                                belongTo: 'right',
                                numDiffs: 1,
                            });
                        }
                        lineRight = lineRight + 1;
                    });
                    break;
            }
            return rows;
        }, []);
    };
    /**
     * @private
     * @param {?} result
     * @return {?}
     */
    NgxTextDiffService.prototype.countDiffs = /**
     * @private
     * @param {?} result
     * @return {?}
     */
    function (result) {
        /** @type {?} */
        var diffCount = 0;
        if (result.leftContent) {
            diffCount += result.leftContent.lineDiffs.filter(function (diff) { return diff.isDiff; }).length;
        }
        if (result.leftContent) {
            diffCount += result.rightContent.lineDiffs.filter(function (diff) { return diff.isDiff; }).length;
        }
        return diffCount;
    };
    /**
     * @private
     * @param {?} value
     * @param {?} compareValue
     * @return {?}
     */
    NgxTextDiffService.prototype.getDiffParts = /**
     * @private
     * @param {?} value
     * @param {?} compareValue
     * @return {?}
     */
    function (value, compareValue) {
        /** @type {?} */
        var diffParts = [];
        /** @type {?} */
        var i = 0;
        /** @type {?} */
        var j = 0;
        /** @type {?} */
        var shared = '';
        /** @type {?} */
        var diff = '';
        while (i < value.length) {
            if (value[i] === compareValue[j] && j < compareValue.length) {
                if (diff !== '') {
                    diffParts.push({ content: diff, isDiff: true });
                    diff = '';
                }
                shared += value[i];
            }
            else {
                if (shared !== '') {
                    diffParts.push({ content: shared, isDiff: false });
                    shared = '';
                }
                diff += value[i];
            }
            i++;
            j++;
        }
        if (diff !== '') {
            diffParts.push({ content: diff, isDiff: true });
        }
        else if (shared !== '') {
            diffParts.push({ content: shared, isDiff: false });
        }
        return diffParts;
    };
    NgxTextDiffService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    NgxTextDiffService.ctorParameters = function () { return []; };
    /** @nocollapse */ NgxTextDiffService.ngInjectableDef = i0.defineInjectable({ factory: function NgxTextDiffService_Factory() { return new NgxTextDiffService(); }, token: NgxTextDiffService, providedIn: "root" });
    return NgxTextDiffService;
}());
export { NgxTextDiffService };
if (false) {
    /** @type {?} */
    NgxTextDiffService.prototype.diffParser;
}
//# sourceMappingURL=data:application/json;base64,