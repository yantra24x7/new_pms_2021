/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectorRef, Component, Input, Output, EventEmitter } from '@angular/core';
import { NgxTextDiffService } from './ngx-text-diff.service';
import { Observable } from 'rxjs';
var NgxTextDiffComponent = /** @class */ (function () {
    function NgxTextDiffComponent(diff, cd) {
        this.diff = diff;
        this.cd = cd;
        this._hideMatchingLines = false;
        this.format = 'SideBySide';
        this.left = '';
        this.right = '';
        this.loading = false;
        this.showToolbar = true;
        this.showBtnToolbar = true;
        this.compareResults = new EventEmitter();
        this.subscriptions = [];
        this.tableRows = [];
        this.filteredTableRows = [];
        this.tableRowsLineByLine = [];
        this.filteredTableRowsLineByLine = [];
        this.diffsCount = 0;
        this.formatOptions = [
            {
                id: 'side-by-side',
                name: 'side-by-side',
                label: 'Side by Side',
                value: 'SideBySide',
                icon: 'la-code',
            },
            {
                id: 'line-by-line',
                name: 'line-by-line',
                label: 'Line by Line',
                value: 'LineByLine',
                icon: 'la-file-text',
            },
        ];
    }
    Object.defineProperty(NgxTextDiffComponent.prototype, "hideMatchingLines", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hideMatchingLines;
        },
        set: /**
         * @param {?} hide
         * @return {?}
         */
        function (hide) {
            this.hideMatchingLinesChanged(hide);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NgxTextDiffComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.loading = true;
        if (this.diffContent) {
            this.subscriptions.push(this.diffContent.subscribe(function (content) {
                _this.loading = true;
                _this.left = content.leftContent;
                _this.right = content.rightContent;
                _this.renderDiffs()
                    .then(function () {
                    _this.cd.detectChanges();
                    _this.loading = false;
                })
                    .catch(function () { return (_this.loading = false); });
            }));
        }
        this.renderDiffs()
            .then(function () { return (_this.loading = false); })
            .catch(function (e) { return (_this.loading = false); });
    };
    /**
     * @return {?}
     */
    NgxTextDiffComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.subscriptions) {
            this.subscriptions.forEach(function (subscription) { return subscription.unsubscribe(); });
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NgxTextDiffComponent.prototype.hideMatchingLinesChanged = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this._hideMatchingLines = value;
        if (this.hideMatchingLines) {
            this.filteredTableRows = this.tableRows.filter(function (row) { return (row.leftContent && row.leftContent.prefix === '-') || (row.rightContent && row.rightContent.prefix === '+'); });
            this.filteredTableRowsLineByLine = this.tableRowsLineByLine.filter(function (row) { return (row.leftContent && row.leftContent.prefix === '-') || (row.rightContent && row.rightContent.prefix === '+'); });
        }
        else {
            this.filteredTableRows = this.tableRows;
            this.filteredTableRowsLineByLine = this.tableRowsLineByLine;
        }
    };
    /**
     * @param {?} format
     * @return {?}
     */
    NgxTextDiffComponent.prototype.setDiffTableFormat = /**
     * @param {?} format
     * @return {?}
     */
    function (format) {
        this.format = format;
    };
    /**
     * @return {?}
     */
    NgxTextDiffComponent.prototype.renderDiffs = /**
     * @return {?}
     */
    function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a, e_1;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 2, , 3]);
                        this.diffsCount = 0;
                        _a = this;
                        return [4 /*yield*/, this.diff.getDiffsByLines(this.left, this.right)];
                    case 1:
                        _a.tableRows = _b.sent();
                        this.tableRowsLineByLine = this.tableRows.reduce(function (tableLineByLine, row) {
                            if (!tableLineByLine) {
                                tableLineByLine = [];
                            }
                            if (row.hasDiffs) {
                                if (row.leftContent) {
                                    tableLineByLine.push({
                                        leftContent: row.leftContent,
                                        rightContent: null,
                                        belongTo: row.belongTo,
                                        hasDiffs: true,
                                        numDiffs: row.numDiffs,
                                    });
                                }
                                if (row.rightContent) {
                                    tableLineByLine.push({
                                        leftContent: null,
                                        rightContent: row.rightContent,
                                        belongTo: row.belongTo,
                                        hasDiffs: true,
                                        numDiffs: row.numDiffs,
                                    });
                                }
                            }
                            else {
                                tableLineByLine.push(row);
                            }
                            return tableLineByLine;
                        }, []);
                        this.diffsCount = this.tableRows.filter(function (row) { return row.hasDiffs; }).length;
                        this.filteredTableRows = this.tableRows;
                        this.filteredTableRowsLineByLine = this.tableRowsLineByLine;
                        this.emitCompareResultsEvent();
                        return [3 /*break*/, 3];
                    case 2:
                        e_1 = _b.sent();
                        throw e_1;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @return {?}
     */
    NgxTextDiffComponent.prototype.emitCompareResultsEvent = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var diffResults = {
            hasDiff: this.diffsCount > 0,
            diffsCount: this.diffsCount,
            rowsWithDiff: this.tableRows
                .filter(function (row) { return row.hasDiffs; })
                .map(function (row) { return ({
                leftLineNumber: row.leftContent ? row.leftContent.lineNumber : null,
                rightLineNumber: row.rightContent ? row.rightContent.lineNumber : null,
                numDiffs: row.numDiffs,
            }); }),
        };
        this.compareResults.next(diffResults);
    };
    /**
     * @param {?} index
     * @param {?} row
     * @return {?}
     */
    NgxTextDiffComponent.prototype.trackTableRows = /**
     * @param {?} index
     * @param {?} row
     * @return {?}
     */
    function (index, row) {
        return row && row.leftContent ? row.leftContent.lineContent : row && row.rightContent ? row.rightContent.lineContent : undefined;
    };
    /**
     * @param {?} index
     * @param {?} diff
     * @return {?}
     */
    NgxTextDiffComponent.prototype.trackDiffs = /**
     * @param {?} index
     * @param {?} diff
     * @return {?}
     */
    function (index, diff) {
        return diff && diff.content ? diff.content : undefined;
    };
    NgxTextDiffComponent.decorators = [
        { type: Component, args: [{
                    selector: 'td-ngx-text-diff',
                    template: "<td-loader-spinner [active]=\"loading\"></td-loader-spinner>\r\n<div class=\"td-wrapper\" [ngClass]=\"outerContainerClass\" [ngStyle]=\"outerContainerStyle\" *ngIf=\"!loading\">\r\n\r\n  <div [ngClass]=\"toolbarClass\" [ngStyle]=\"toolbarStyle\" *ngIf=\"showToolbar\">\r\n    <div class=\"td-toolbar-show-diff\">\r\n      <label class=\"td-checkbox-container\"\r\n        >Show Lines with Diffs ({{ diffsCount }})\r\n        <input type=\"checkbox\" id=\"showDiffs\" [ngModel]=\"hideMatchingLines\" (ngModelChange)=\"hideMatchingLinesChanged($event)\" />\r\n        <span class=\"checkmark\"></span>\r\n      </label>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"td-toolbar-select-format\" *ngIf=\"showToolbar && showBtnToolbar\">\r\n    <div class=\"td-btn-group td-btn-group-toggle\" data-toggle=\"buttons\">\r\n      <button\r\n        *ngFor=\"let option of formatOptions\"\r\n        [ngClass]=\"{ active: format === option.value, disabled: !!option.disabled }\"\r\n        [name]=\"option.name\"\r\n        [id]=\"option.id\"\r\n        [disabled]=\"!!option.disabled\"\r\n        (click)=\"setDiffTableFormat(option.value)\"\r\n      >\r\n        {{ option.label }}\r\n      </button>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"td-table-wrapper\" [ngClass]=\"compareRowsClass\" [ngStyle]=\"compareRowsStyle\">\r\n    <div class=\"td-table-container side-by-side\" *ngIf=\"format === 'SideBySide'\">\r\n      <table class=\"td-table\">\r\n        <tbody>\r\n          <tr *ngFor=\"let row of filteredTableRows; trackBy: trackTableRows\">\r\n            <td\r\n              scope=\"row\"\r\n              class=\"fit-column line-number-col\"\r\n              [ngClass]=\"{ 'delete-row': row.leftContent?.prefix === '-', 'empty-row': !row.leftContent?.lineContent }\"\r\n            >\r\n              {{ row.leftContent?.lineNumber !== -1 ? row.leftContent?.lineNumber : ' ' }}\r\n            </td>\r\n            <td\r\n              class=\"fit-column prefix-col\"\r\n              [ngClass]=\"{ 'delete-row': row.leftContent?.prefix === '-', 'empty-row': !row.leftContent?.lineContent }\"\r\n            >\r\n              <span>{{ row.leftContent?.prefix || ' ' }}</span>\r\n            </td>\r\n            <td\r\n              class=\"content-col\"\r\n              [ngClass]=\"{ 'delete-row': row.leftContent?.prefix === '-', 'empty-row': !row.leftContent?.lineContent }\"\r\n              *ngIf=\"!row.hasDiffs\"\r\n            >\r\n              <span [innerHTML]=\"row.leftContent?.lineContent | formatLine\"></span>\r\n            </td>\r\n            <td\r\n              class=\"content-col\"\r\n              [ngClass]=\"{ 'delete-row': row.leftContent?.prefix === '-', 'empty-row': !row.leftContent?.lineContent }\"\r\n              *ngIf=\"row.hasDiffs\"\r\n            >\r\n              <span\r\n                [innerHTML]=\"diff.content | formatLine\"\r\n                [ngClass]=\"{ highlight: diff.isDiff }\"\r\n                *ngFor=\"let diff of row.leftContent?.lineDiffs; trackBy: trackDiffs\"\r\n              ></span>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n    <div class=\"td-table-container side-by-side\" *ngIf=\"format === 'SideBySide'\">\r\n      <table class=\"td-table\">\r\n        <tbody>\r\n          <tr *ngFor=\"let row of filteredTableRows; trackBy: trackTableRows\">\r\n            <td\r\n              scope=\"row\"\r\n              class=\"fit-column line-number-col\"\r\n              [ngClass]=\"{ 'insert-row': row.rightContent?.prefix === '+', 'empty-row': !row.rightContent?.lineContent }\"\r\n            >\r\n              {{ row.rightContent?.lineNumber !== -1 ? row.rightContent?.lineNumber : ' ' }}\r\n            </td>\r\n            <td\r\n              class=\"fit-column prefix-col\"\r\n              [ngClass]=\"{ 'insert-row': row.rightContent?.prefix === '+', 'empty-row': !row.rightContent?.lineContent }\"\r\n            >\r\n              <span>{{ row.rightContent?.prefix || ' ' }}</span>\r\n            </td>\r\n            <td\r\n              class=\"content-col\"\r\n              [ngClass]=\"{ 'insert-row': row.rightContent?.prefix === '+', 'empty-row': !row.rightContent?.lineContent }\"\r\n              *ngIf=\"!row.hasDiffs\"\r\n            >\r\n              <span [innerHTML]=\"row.rightContent?.lineContent | formatLine\"></span>\r\n            </td>\r\n            <td\r\n              class=\"content-col\"\r\n              [ngClass]=\"{ 'insert-row': row.rightContent?.prefix === '+', 'empty-row': !row.rightContent?.lineContent }\"\r\n              *ngIf=\"row.hasDiffs\"\r\n            >\r\n              <span\r\n                [innerHTML]=\"diff.content | formatLine\"\r\n                [ngClass]=\"{ highlight: diff.isDiff }\"\r\n                *ngFor=\"let diff of row.rightContent?.lineDiffs; trackBy: trackDiffs\"\r\n              ></span>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n    <div class=\"td-table-container line-by-line\" *ngIf=\"format === 'LineByLine'\">\r\n      <table class=\"td-table\">\r\n        <tbody>\r\n          <tr *ngFor=\"let row of filteredTableRowsLineByLine; trackBy: trackTableRows\">\r\n            <td scope=\"row\" class=\"fit-column line-number-col-left\">{{ row.leftContent?.lineNumber }}</td>\r\n            <td scope=\"row\" class=\"fit-column line-number-col\">{{ row.rightContent?.lineNumber }}</td>\r\n            <td\r\n              class=\"fit-column prefix-col\"\r\n              [ngClass]=\"{ 'delete-row': row.leftContent?.prefix === '-', 'insert-row': row.rightContent?.prefix === '+' }\"\r\n            >\r\n              <span>{{ row.leftContent?.prefix || row.rightContent?.prefix || ' ' }}</span>\r\n            </td>\r\n            <td\r\n              class=\"content-col\"\r\n              [ngClass]=\"{ 'delete-row': row.leftContent?.prefix === '-', 'insert-row': row.rightContent?.prefix === '+' }\"\r\n              *ngIf=\"!row.hasDiffs\"\r\n            >\r\n              <span [innerHTML]=\"row.leftContent?.lineContent | formatLine\"></span>\r\n            </td>\r\n            <td\r\n              class=\"content-col\"\r\n              [ngClass]=\"{ 'delete-row': row.leftContent?.prefix === '-', 'insert-row': row.rightContent?.prefix === '+' }\"\r\n              *ngIf=\"row.hasDiffs && row.leftContent && row.leftContent?.lineDiffs.length !== 0\"\r\n            >\r\n              <span\r\n                [innerHTML]=\"diff.content | formatLine\"\r\n                [ngClass]=\"{ highlight: diff.isDiff }\"\r\n                *ngFor=\"let diff of row.leftContent?.lineDiffs; trackBy: trackDiffs\"\r\n              ></span>\r\n            </td>\r\n            <td\r\n              class=\"content-col\"\r\n              [ngClass]=\"{ 'delete-row': row.leftContent?.prefix === '-', 'insert-row': row.rightContent?.prefix === '+' }\"\r\n              *ngIf=\"row.hasDiffs && row.rightContent && row.rightContent?.lineDiffs.length !== 0\"\r\n            >\r\n              <span\r\n                [innerHTML]=\"diff.content | formatLine\"\r\n                [ngClass]=\"{ highlight: diff.isDiff }\"\r\n                *ngFor=\"let diff of row.rightContent?.lineDiffs; trackBy: trackDiffs\"\r\n              ></span>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                    styles: [".td-wrapper{display:-ms-grid;display:grid;width:100%;grid-row-gap:10px;-ms-grid-columns:([col] 50%)[2];grid-template-columns:repeat(2,[col] 50%);-ms-grid-rows:([row] auto)[2];grid-template-rows:repeat(2,[row] auto);background-color:#fff;color:#444}.td-toolbar-show-diff{-ms-grid-column:1;grid-column:1;-ms-grid-row:1;grid-row:1}.td-toolbar-select-format{margin-left:auto;-ms-grid-column:2;grid-column:2;-ms-grid-row:1;grid-row:1}.td-table-container{-ms-grid-column:1;-ms-grid-column-span:1;grid-column:1/2;-ms-grid-row:2;grid-row:2;width:100%;max-width:100%;overflow-x:auto}.td-table-wrapper{display:flex;width:200%}.td-table{border:1px solid #a9a9a9;max-height:50vh;width:100%;max-width:100%}.fit-column{width:1px;white-space:nowrap}.line-number-col{border-right:1px solid #ddd;color:#999;text-align:right;background-color:#f7f7f7;padding-left:10px;padding-right:10px;font-size:87.5%}.line-number-col-left{color:#999;padding-left:10px;padding-right:10px;text-align:right;background-color:#f7f7f7;font-size:87.5%}.insert-row,.insert-row>.line-number-col{background-color:#dfd;border-color:#b4e2b4}.delete-row,.delete-row>.line-number-col{background-color:#fee8e9;border-color:#e9aeae}.empty-row{background-color:#f7f7f7;height:24px}.td-table td{border-top:0;padding-top:0;padding-bottom:0;white-space:nowrap;max-width:50%}pre{margin-bottom:0}td.content-col{padding:0;margin:0;line-height:24px}td.prefix-col{padding-left:10px;padding-right:10px;line-height:24px}.td-btn-group{border-radius:4px}.td-btn-group button{background-color:rgba(23,162,184,.7);border:1px solid #17a2b8;color:#fff;cursor:pointer;float:left}.td-btn-group button:not(:last-child){border-right:none}.td-btn-group button:first-child{-webkit-border-top-left-radius:4px;-webkit-border-bottom-left-radius:4px;-moz-border-radius-topleft:4px;-moz-border-radius-bottomleft:4px;border-top-left-radius:4px;border-bottom-left-radius:4px}.td-btn-group button:last-child{-webkit-border-top-right-radius:4px;-webkit-border-bottom-right-radius:4px;-moz-border-radius-topright:4px;-moz-border-radius-bottomright:4px;border-top-right-radius:4px;border-bottom-right-radius:4px}.td-btn-group:after{content:'';clear:both;display:table}.td-btn-group button.active,.td-btn-group button:hover{background-color:#17a2b8}.td-checkbox-container{display:block;position:relative;padding-left:21px;margin-bottom:0;cursor:pointer;font-size:16px;line-height:28px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.td-checkbox-container input{position:absolute;opacity:0;cursor:pointer;height:0;width:0}.checkmark{position:absolute;top:7px;left:0;height:16px;width:16px;background-color:#eee}.td-checkbox-container:hover input~.checkmark{background-color:#ccc}.td-checkbox-container input:checked~.checkmark{background-color:#17a2b8}.checkmark:after{content:\"\";position:absolute;display:none}.td-checkbox-container input:checked~.checkmark:after{display:block}.td-checkbox-container .checkmark:after{left:5px;top:3px;width:5px;height:10px;border:solid #fff;border-width:0 3px 3px 0;-webkit-transform:rotate(45deg);transform:rotate(45deg)}.insert-row>.highlight{background-color:#acf2bd!important}.delete-row>.highlight{background-color:#fdb8c0!important}"]
                }] }
    ];
    /** @nocollapse */
    NgxTextDiffComponent.ctorParameters = function () { return [
        { type: NgxTextDiffService },
        { type: ChangeDetectorRef }
    ]; };
    NgxTextDiffComponent.propDecorators = {
        format: [{ type: Input }],
        left: [{ type: Input }],
        right: [{ type: Input }],
        diffContent: [{ type: Input }],
        loading: [{ type: Input }],
        showToolbar: [{ type: Input }],
        showBtnToolbar: [{ type: Input }],
        hideMatchingLines: [{ type: Input }],
        outerContainerClass: [{ type: Input }],
        outerContainerStyle: [{ type: Input }],
        toolbarClass: [{ type: Input }],
        toolbarStyle: [{ type: Input }],
        compareRowsClass: [{ type: Input }],
        compareRowsStyle: [{ type: Input }],
        compareResults: [{ type: Output }]
    };
    return NgxTextDiffComponent;
}());
export { NgxTextDiffComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxTextDiffComponent.prototype._hideMatchingLines;
    /** @type {?} */
    NgxTextDiffComponent.prototype.format;
    /** @type {?} */
    NgxTextDiffComponent.prototype.left;
    /** @type {?} */
    NgxTextDiffComponent.prototype.right;
    /** @type {?} */
    NgxTextDiffComponent.prototype.diffContent;
    /** @type {?} */
    NgxTextDiffComponent.prototype.loading;
    /** @type {?} */
    NgxTextDiffComponent.prototype.showToolbar;
    /** @type {?} */
    NgxTextDiffComponent.prototype.showBtnToolbar;
    /** @type {?} */
    NgxTextDiffComponent.prototype.outerContainerClass;
    /** @type {?} */
    NgxTextDiffComponent.prototype.outerContainerStyle;
    /** @type {?} */
    NgxTextDiffComponent.prototype.toolbarClass;
    /** @type {?} */
    NgxTextDiffComponent.prototype.toolbarStyle;
    /** @type {?} */
    NgxTextDiffComponent.prototype.compareRowsClass;
    /** @type {?} */
    NgxTextDiffComponent.prototype.compareRowsStyle;
    /** @type {?} */
    NgxTextDiffComponent.prototype.compareResults;
    /** @type {?} */
    NgxTextDiffComponent.prototype.subscriptions;
    /** @type {?} */
    NgxTextDiffComponent.prototype.tableRows;
    /** @type {?} */
    NgxTextDiffComponent.prototype.filteredTableRows;
    /** @type {?} */
    NgxTextDiffComponent.prototype.tableRowsLineByLine;
    /** @type {?} */
    NgxTextDiffComponent.prototype.filteredTableRowsLineByLine;
    /** @type {?} */
    NgxTextDiffComponent.prototype.diffsCount;
    /** @type {?} */
    NgxTextDiffComponent.prototype.formatOptions;
    /**
     * @type {?}
     * @private
     */
    NgxTextDiffComponent.prototype.diff;
    /**
     * @type {?}
     * @private
     */
    NgxTextDiffComponent.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,